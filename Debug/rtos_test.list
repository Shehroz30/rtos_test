
rtos_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005338  08005338  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005338  08005338  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005338  08005338  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001a84  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001af8  20001af8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e2e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4c  00000000  00000000  00034ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  00037a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  00038b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002943  00000000  00000000  00039ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d02  00000000  00000000  0003c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb4bd  00000000  00000000  0004f10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010a5ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049a0  00000000  00000000  0010a61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005218 	.word	0x08005218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005218 	.word	0x08005218

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 f9ca 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f824 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f85e 	bl	800029c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e0:	f002 f9a6 	bl	8002530 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80001e4:	4a09      	ldr	r2, [pc, #36]	; (800020c <main+0x3c>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <main+0x40>)
 80001ea:	f002 fa09 	bl	8002600 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <main+0x44>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <main+0x48>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4808      	ldr	r0, [pc, #32]	; (800021c <main+0x4c>)
 80001fa:	f002 fa01 	bl	8002600 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <main+0x50>)
 8000202:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000204:	f002 f9c8 	bl	8002598 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x38>
 800020a:	bf00      	nop
 800020c:	08005258 	.word	0x08005258
 8000210:	08000301 	.word	0x08000301
 8000214:	20000090 	.word	0x20000090
 8000218:	0800527c 	.word	0x0800527c
 800021c:	08000321 	.word	0x08000321
 8000220:	20000094 	.word	0x20000094

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f004 ff26 	bl	8005084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fc4a 	bl	8000af4 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f87d 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f001 fc74 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f869 	bl	8000364 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_GPIO_Init+0x5c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <MX_GPIO_Init+0x5c>)
 80002b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ba:	6153      	str	r3, [r2, #20]
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_GPIO_Init+0x5c>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80002ce:	480b      	ldr	r0, [pc, #44]	; (80002fc <MX_GPIO_Init+0x60>)
 80002d0:	f000 fbde 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15;
 80002d4:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80002d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002da:	2301      	movs	r3, #1
 80002dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4804      	ldr	r0, [pc, #16]	; (80002fc <MX_GPIO_Init+0x60>)
 80002ec:	f000 fa56 	bl	800079c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002f0:	bf00      	nop
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40021000 	.word	0x40021000
 80002fc:	48001000 	.word	0x48001000

08000300 <StartBlink01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030c:	4803      	ldr	r0, [pc, #12]	; (800031c <StartBlink01+0x1c>)
 800030e:	f000 fbd7 	bl	8000ac0 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f002 fa1d 	bl	8002754 <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800031a:	e7f5      	b.n	8000308 <StartBlink01+0x8>
 800031c:	48001000 	.word	0x48001000

08000320 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8000328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <StartBlink02+0x1c>)
 800032e:	f000 fbc7 	bl	8000ac0 <HAL_GPIO_TogglePin>
    osDelay(600);
 8000332:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000336:	f002 fa0d 	bl	8002754 <osDelay>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 800033a:	e7f5      	b.n	8000328 <StartBlink02+0x8>
 800033c:	48001000 	.word	0x48001000

08000340 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d101      	bne.n	8000356 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000352:	f000 f921 	bl	8000598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40001400 	.word	0x40001400

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <HAL_MspInit+0x4c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a10      	ldr	r2, [pc, #64]	; (80003bc <HAL_MspInit+0x4c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <HAL_MspInit+0x4c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <HAL_MspInit+0x4c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <HAL_MspInit+0x4c>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HAL_MspInit+0x4c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	210f      	movs	r1, #15
 80003aa:	f06f 0001 	mvn.w	r0, #1
 80003ae:	f000 f9cb 	bl	8000748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08e      	sub	sp, #56	; 0x38
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80003d0:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <HAL_InitTick+0xe0>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4a32      	ldr	r2, [pc, #200]	; (80004a0 <HAL_InitTick+0xe0>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	61d3      	str	r3, [r2, #28]
 80003dc:	4b30      	ldr	r3, [pc, #192]	; (80004a0 <HAL_InitTick+0xe0>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003e8:	f107 0210 	add.w	r2, r7, #16
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fdba 	bl	8001f6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003f8:	6a3b      	ldr	r3, [r7, #32]
 80003fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d103      	bne.n	800040a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000402:	f001 fd91 	bl	8001f28 <HAL_RCC_GetPCLK1Freq>
 8000406:	6378      	str	r0, [r7, #52]	; 0x34
 8000408:	e004      	b.n	8000414 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800040a:	f001 fd8d 	bl	8001f28 <HAL_RCC_GetPCLK1Freq>
 800040e:	4603      	mov	r3, r0
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000416:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <HAL_InitTick+0xe4>)
 8000418:	fba2 2303 	umull	r2, r3, r2, r3
 800041c:	0c9b      	lsrs	r3, r3, #18
 800041e:	3b01      	subs	r3, #1
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000422:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <HAL_InitTick+0xe8>)
 8000424:	4a21      	ldr	r2, [pc, #132]	; (80004ac <HAL_InitTick+0xec>)
 8000426:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <HAL_InitTick+0xe8>)
 800042a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800042e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000430:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <HAL_InitTick+0xe8>)
 8000432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000434:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <HAL_InitTick+0xe8>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043c:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <HAL_InitTick+0xe8>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <HAL_InitTick+0xe8>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000448:	4817      	ldr	r0, [pc, #92]	; (80004a8 <HAL_InitTick+0xe8>)
 800044a:	f001 fdc1 	bl	8001fd0 <HAL_TIM_Base_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000458:	2b00      	cmp	r3, #0
 800045a:	d11b      	bne.n	8000494 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800045c:	4812      	ldr	r0, [pc, #72]	; (80004a8 <HAL_InitTick+0xe8>)
 800045e:	f001 fe19 	bl	8002094 <HAL_TIM_Base_Start_IT>
 8000462:	4603      	mov	r3, r0
 8000464:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800046c:	2b00      	cmp	r3, #0
 800046e:	d111      	bne.n	8000494 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000470:	2037      	movs	r0, #55	; 0x37
 8000472:	f000 f985 	bl	8000780 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b0f      	cmp	r3, #15
 800047a:	d808      	bhi.n	800048e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800047c:	2200      	movs	r2, #0
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	2037      	movs	r0, #55	; 0x37
 8000482:	f000 f961 	bl	8000748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <HAL_InitTick+0xf0>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6013      	str	r3, [r2, #0]
 800048c:	e002      	b.n	8000494 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800048e:	2301      	movs	r3, #1
 8000490:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000494:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000498:	4618      	mov	r0, r3
 800049a:	3738      	adds	r7, #56	; 0x38
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000
 80004a4:	431bde83 	.word	0x431bde83
 80004a8:	20000098 	.word	0x20000098
 80004ac:	40001400 	.word	0x40001400
 80004b0:	20000004 	.word	0x20000004

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <TIM7_IRQHandler+0x10>)
 80004e6:	f001 fe3f 	bl	8002168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000098 	.word	0x20000098

080004f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <SystemInit+0x20>)
 80004fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <SystemInit+0x20>)
 8000500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000550 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800051c:	f7ff ffea 	bl	80004f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f004 fd69 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054a:	f7ff fe41 	bl	80001d0 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000550:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800055c:	08005340 	.word	0x08005340
  ldr r2, =_sbss
 8000560:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000564:	20001af8 	.word	0x20001af8

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f8d8 	bl	8000732 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ff1c 	bl	80003c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff fef2 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x20>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_IncTick+0x24>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008
 80005bc:	200000e4 	.word	0x200000e4

080005c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <HAL_GetTick+0x14>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200000e4 	.word	0x200000e4

080005d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <__NVIC_GetPriorityGrouping+0x18>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	f003 0307 	and.w	r3, r3, #7
}
 800062e:	4618      	mov	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db0b      	blt.n	8000666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 021f 	and.w	r2, r3, #31
 8000654:	4907      	ldr	r1, [pc, #28]	; (8000674 <__NVIC_EnableIRQ+0x38>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	095b      	lsrs	r3, r3, #5
 800065c:	2001      	movs	r0, #1
 800065e:	fa00 f202 	lsl.w	r2, r0, r2
 8000662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e100 	.word	0xe000e100

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ff4c 	bl	80005d8 <__NVIC_SetPriorityGrouping>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800075a:	f7ff ff61 	bl	8000620 <__NVIC_GetPriorityGrouping>
 800075e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	6978      	ldr	r0, [r7, #20]
 8000766:	f7ff ffb1 	bl	80006cc <NVIC_EncodePriority>
 800076a:	4602      	mov	r2, r0
 800076c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff80 	bl	8000678 <__NVIC_SetPriority>
}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff54 	bl	800063c <__NVIC_EnableIRQ>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007aa:	e154      	b.n	8000a56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	2101      	movs	r1, #1
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 8146 	beq.w	8000a50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 0303 	and.w	r3, r3, #3
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d005      	beq.n	80007dc <HAL_GPIO_Init+0x40>
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d130      	bne.n	800083e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	43db      	mvns	r3, r3
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	68da      	ldr	r2, [r3, #12]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000812:	2201      	movs	r2, #1
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4013      	ands	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	091b      	lsrs	r3, r3, #4
 8000828:	f003 0201 	and.w	r2, r3, #1
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4313      	orrs	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	2b03      	cmp	r3, #3
 8000848:	d017      	beq.n	800087a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	2203      	movs	r2, #3
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	4013      	ands	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4313      	orrs	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 0303 	and.w	r3, r3, #3
 8000882:	2b02      	cmp	r3, #2
 8000884:	d123      	bne.n	80008ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	08da      	lsrs	r2, r3, #3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3208      	adds	r2, #8
 800088e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	220f      	movs	r2, #15
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	08da      	lsrs	r2, r3, #3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3208      	adds	r2, #8
 80008c8:	6939      	ldr	r1, [r7, #16]
 80008ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4013      	ands	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 0203 	and.w	r2, r3, #3
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 80a0 	beq.w	8000a50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000910:	4b58      	ldr	r3, [pc, #352]	; (8000a74 <HAL_GPIO_Init+0x2d8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a57      	ldr	r2, [pc, #348]	; (8000a74 <HAL_GPIO_Init+0x2d8>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b55      	ldr	r3, [pc, #340]	; (8000a74 <HAL_GPIO_Init+0x2d8>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000928:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <HAL_GPIO_Init+0x2dc>)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	3302      	adds	r3, #2
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000952:	d019      	beq.n	8000988 <HAL_GPIO_Init+0x1ec>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a49      	ldr	r2, [pc, #292]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d013      	beq.n	8000984 <HAL_GPIO_Init+0x1e8>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a48      	ldr	r2, [pc, #288]	; (8000a80 <HAL_GPIO_Init+0x2e4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d00d      	beq.n	8000980 <HAL_GPIO_Init+0x1e4>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a47      	ldr	r2, [pc, #284]	; (8000a84 <HAL_GPIO_Init+0x2e8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d007      	beq.n	800097c <HAL_GPIO_Init+0x1e0>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a46      	ldr	r2, [pc, #280]	; (8000a88 <HAL_GPIO_Init+0x2ec>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d101      	bne.n	8000978 <HAL_GPIO_Init+0x1dc>
 8000974:	2304      	movs	r3, #4
 8000976:	e008      	b.n	800098a <HAL_GPIO_Init+0x1ee>
 8000978:	2305      	movs	r3, #5
 800097a:	e006      	b.n	800098a <HAL_GPIO_Init+0x1ee>
 800097c:	2303      	movs	r3, #3
 800097e:	e004      	b.n	800098a <HAL_GPIO_Init+0x1ee>
 8000980:	2302      	movs	r3, #2
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0x1ee>
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <HAL_GPIO_Init+0x1ee>
 8000988:	2300      	movs	r3, #0
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	f002 0203 	and.w	r2, r2, #3
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	4093      	lsls	r3, r2
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800099a:	4937      	ldr	r1, [pc, #220]	; (8000a78 <HAL_GPIO_Init+0x2dc>)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009a8:	4b38      	ldr	r3, [pc, #224]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009cc:	4a2f      	ldr	r2, [pc, #188]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009f6:	4a25      	ldr	r2, [pc, #148]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a20:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_GPIO_Init+0x2f0>)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3301      	adds	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f47f aea3 	bne.w	80007ac <HAL_GPIO_Init+0x10>
  }
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	48000800 	.word	0x48000800
 8000a84:	48000c00 	.word	0x48000c00
 8000a88:	48001000 	.word	0x48001000
 8000a8c:	40010400 	.word	0x40010400

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000aac:	e002      	b.n	8000ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	041a      	lsls	r2, r3, #16
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43d9      	mvns	r1, r3
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	400b      	ands	r3, r1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f001 b823 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 817d 	beq.w	8000e2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b30:	4bbc      	ldr	r3, [pc, #752]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d00c      	beq.n	8000b56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b3c:	4bb9      	ldr	r3, [pc, #740]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d15c      	bne.n	8000c02 <HAL_RCC_OscConfig+0x10e>
 8000b48:	4bb6      	ldr	r3, [pc, #728]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b54:	d155      	bne.n	8000c02 <HAL_RCC_OscConfig+0x10e>
 8000b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b62:	fa93 f3a3 	rbit	r3, r3
 8000b66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6e:	fab3 f383 	clz	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	095b      	lsrs	r3, r3, #5
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <HAL_RCC_OscConfig+0x94>
 8000b82:	4ba8      	ldr	r3, [pc, #672]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	e015      	b.n	8000bb4 <HAL_RCC_OscConfig+0xc0>
 8000b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b94:	fa93 f3a3 	rbit	r3, r3
 8000b98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ba4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ba8:	fa93 f3a3 	rbit	r3, r3
 8000bac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000bb0:	4b9c      	ldr	r3, [pc, #624]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bc0:	fa92 f2a2 	rbit	r2, r2
 8000bc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000bc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	f042 0220 	orr.w	r2, r2, #32
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	f002 021f 	and.w	r2, r2, #31
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fa01 f202 	lsl.w	r2, r1, r2
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f000 811f 	beq.w	8000e28 <HAL_RCC_OscConfig+0x334>
 8000bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8116 	bne.w	8000e28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f000 bfaf 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c12:	d106      	bne.n	8000c22 <HAL_RCC_OscConfig+0x12e>
 8000c14:	4b83      	ldr	r3, [pc, #524]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a82      	ldr	r2, [pc, #520]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e036      	b.n	8000c90 <HAL_RCC_OscConfig+0x19c>
 8000c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x158>
 8000c32:	4b7c      	ldr	r3, [pc, #496]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a7b      	ldr	r2, [pc, #492]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b79      	ldr	r3, [pc, #484]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a78      	ldr	r2, [pc, #480]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e021      	b.n	8000c90 <HAL_RCC_OscConfig+0x19c>
 8000c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c5c:	d10c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x184>
 8000c5e:	4b71      	ldr	r3, [pc, #452]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a70      	ldr	r2, [pc, #448]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6d      	ldr	r2, [pc, #436]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e00b      	b.n	8000c90 <HAL_RCC_OscConfig+0x19c>
 8000c78:	4b6a      	ldr	r3, [pc, #424]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a69      	ldr	r2, [pc, #420]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b67      	ldr	r3, [pc, #412]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a66      	ldr	r2, [pc, #408]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c90:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c94:	f023 020f 	bic.w	r2, r3, #15
 8000c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	495f      	ldr	r1, [pc, #380]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d059      	beq.n	8000d6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cba:	f7ff fc81 	bl	80005c0 <HAL_GetTick>
 8000cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc2:	e00a      	b.n	8000cda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fc7c 	bl	80005c0 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b64      	cmp	r3, #100	; 0x64
 8000cd2:	d902      	bls.n	8000cda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f000 bf43 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
 8000cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cde:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ce6:	fa93 f3a3 	rbit	r3, r3
 8000cea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000cee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	095b      	lsrs	r3, r3, #5
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d102      	bne.n	8000d0c <HAL_RCC_OscConfig+0x218>
 8000d06:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	e015      	b.n	8000d38 <HAL_RCC_OscConfig+0x244>
 8000d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d34:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d44:	fa92 f2a2 	rbit	r2, r2
 8000d48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	f042 0220 	orr.w	r2, r2, #32
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	f002 021f 	and.w	r2, r2, #31
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0ab      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x1d0>
 8000d6c:	e05d      	b.n	8000e2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fc27 	bl	80005c0 <HAL_GetTick>
 8000d72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	e00a      	b.n	8000d8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fc22 	bl	80005c0 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b64      	cmp	r3, #100	; 0x64
 8000d86:	d902      	bls.n	8000d8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	f000 bee9 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
 8000d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000da2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da6:	fab3 f383 	clz	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	095b      	lsrs	r3, r3, #5
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d102      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x2cc>
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	e015      	b.n	8000dec <HAL_RCC_OscConfig+0x2f8>
 8000dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ddc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_RCC_OscConfig+0x330>)
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000df4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000df8:	fa92 f2a2 	rbit	r2, r2
 8000dfc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e00:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e04:	fab2 f282 	clz	r2, r2
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	f042 0220 	orr.w	r2, r2, #32
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	f002 021f 	and.w	r2, r2, #31
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ab      	bne.n	8000d78 <HAL_RCC_OscConfig+0x284>
 8000e20:	e003      	b.n	8000e2a <HAL_RCC_OscConfig+0x336>
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 817d 	beq.w	800113a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e40:	4ba6      	ldr	r3, [pc, #664]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00b      	beq.n	8000e64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e4c:	4ba3      	ldr	r3, [pc, #652]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 030c 	and.w	r3, r3, #12
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d172      	bne.n	8000f3e <HAL_RCC_OscConfig+0x44a>
 8000e58:	4ba0      	ldr	r3, [pc, #640]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d16c      	bne.n	8000f3e <HAL_RCC_OscConfig+0x44a>
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e76:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d102      	bne.n	8000e94 <HAL_RCC_OscConfig+0x3a0>
 8000e8e:	4b93      	ldr	r3, [pc, #588]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	e013      	b.n	8000ebc <HAL_RCC_OscConfig+0x3c8>
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000eb8:	4b88      	ldr	r3, [pc, #544]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ec2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ec6:	fa92 f2a2 	rbit	r2, r2
 8000eca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000ece:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ed2:	fab2 f282 	clz	r2, r2
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	f042 0220 	orr.w	r2, r2, #32
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	f002 021f 	and.w	r2, r2, #31
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00a      	beq.n	8000f04 <HAL_RCC_OscConfig+0x410>
 8000eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d002      	beq.n	8000f04 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f000 be2e 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f04:	4b75      	ldr	r3, [pc, #468]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	21f8      	movs	r1, #248	; 0xf8
 8000f1a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f22:	fa91 f1a1 	rbit	r1, r1
 8000f26:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f2a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f2e:	fab1 f181 	clz	r1, r1
 8000f32:	b2c9      	uxtb	r1, r1
 8000f34:	408b      	lsls	r3, r1
 8000f36:	4969      	ldr	r1, [pc, #420]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3c:	e0fd      	b.n	800113a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8088 	beq.w	8001060 <HAL_RCC_OscConfig+0x56c>
 8000f50:	2301      	movs	r3, #1
 8000f52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	461a      	mov	r2, r3
 8000f78:	2301      	movs	r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fb20 	bl	80005c0 <HAL_GetTick>
 8000f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fb1b 	bl	80005c0 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d902      	bls.n	8000f9c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f000 bde2 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000fae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x4d8>
 8000fc6:	4b45      	ldr	r3, [pc, #276]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e013      	b.n	8000ff4 <HAL_RCC_OscConfig+0x500>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fde:	2302      	movs	r3, #2
 8000fe0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fe4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000ff0:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000ffa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ffe:	fa92 f2a2 	rbit	r2, r2
 8001002:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001006:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	f042 0220 	orr.w	r2, r2, #32
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	f002 021f 	and.w	r2, r2, #31
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0af      	beq.n	8000f86 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	21f8      	movs	r1, #248	; 0xf8
 800103c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001044:	fa91 f1a1 	rbit	r1, r1
 8001048:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800104c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001050:	fab1 f181 	clz	r1, r1
 8001054:	b2c9      	uxtb	r1, r1
 8001056:	408b      	lsls	r3, r1
 8001058:	4920      	ldr	r1, [pc, #128]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 800105a:	4313      	orrs	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
 800105e:	e06c      	b.n	800113a <HAL_RCC_OscConfig+0x646>
 8001060:	2301      	movs	r3, #1
 8001062:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001072:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	fab3 f383 	clz	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001080:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	461a      	mov	r2, r3
 8001088:	2300      	movs	r3, #0
 800108a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fa98 	bl	80005c0 <HAL_GetTick>
 8001090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fa93 	bl	80005c0 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d902      	bls.n	80010ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	f000 bd5a 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80010be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	095b      	lsrs	r3, r3, #5
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d104      	bne.n	80010e0 <HAL_RCC_OscConfig+0x5ec>
 80010d6:	4b01      	ldr	r3, [pc, #4]	; (80010dc <HAL_RCC_OscConfig+0x5e8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	e015      	b.n	8001108 <HAL_RCC_OscConfig+0x614>
 80010dc:	40021000 	.word	0x40021000
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001104:	4bc8      	ldr	r3, [pc, #800]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	2202      	movs	r2, #2
 800110a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800110e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001112:	fa92 f2a2 	rbit	r2, r2
 8001116:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800111a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800111e:	fab2 f282 	clz	r2, r2
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	f042 0220 	orr.w	r2, r2, #32
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	f002 021f 	and.w	r2, r2, #31
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1ad      	bne.n	8001096 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8110 	beq.w	8001370 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d079      	beq.n	8001254 <HAL_RCC_OscConfig+0x760>
 8001160:	2301      	movs	r3, #1
 8001162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4bab      	ldr	r3, [pc, #684]	; (800142c <HAL_RCC_OscConfig+0x938>)
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	461a      	mov	r2, r3
 8001186:	2301      	movs	r3, #1
 8001188:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff fa19 	bl	80005c0 <HAL_GetTick>
 800118e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	e00a      	b.n	80011aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fa14 	bl	80005c0 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d902      	bls.n	80011aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	f000 bcdb 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80011c4:	2202      	movs	r2, #2
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	fa93 f2a3 	rbit	r2, r3
 80011d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011e8:	2202      	movs	r2, #2
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	fa93 f2a3 	rbit	r2, r3
 80011fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001202:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001204:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 8001206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001210:	2102      	movs	r1, #2
 8001212:	6019      	str	r1, [r3, #0]
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	fa93 f1a3 	rbit	r1, r3
 8001222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001226:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800122a:	6019      	str	r1, [r3, #0]
  return result;
 800122c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001230:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0a0      	beq.n	8001194 <HAL_RCC_OscConfig+0x6a0>
 8001252:	e08d      	b.n	8001370 <HAL_RCC_OscConfig+0x87c>
 8001254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001258:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001264:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	fa93 f2a3 	rbit	r2, r3
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001276:	601a      	str	r2, [r3, #0]
  return result;
 8001278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001280:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x938>)
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	461a      	mov	r2, r3
 8001292:	2300      	movs	r3, #0
 8001294:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff f993 	bl	80005c0 <HAL_GetTick>
 800129a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff f98e 	bl	80005c0 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d902      	bls.n	80012b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f000 bc55 	b.w	8001b60 <HAL_RCC_OscConfig+0x106c>
 80012b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012be:	2202      	movs	r2, #2
 80012c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	fa93 f2a3 	rbit	r2, r3
 80012d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80012e2:	2202      	movs	r2, #2
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	fa93 f2a3 	rbit	r2, r3
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001306:	2202      	movs	r2, #2
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fa93 f2a3 	rbit	r2, r3
 8001318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001320:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 8001324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800132e:	2102      	movs	r1, #2
 8001330:	6019      	str	r1, [r3, #0]
 8001332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001336:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fa93 f1a3 	rbit	r1, r3
 8001340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001344:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001348:	6019      	str	r1, [r3, #0]
  return result;
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 031f 	and.w	r3, r3, #31
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d197      	bne.n	80012a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 81a1 	beq.w	80016c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d116      	bne.n	80013c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a22      	ldr	r2, [pc, #136]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80013be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_RCC_OscConfig+0x93c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d11a      	bne.n	8001408 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_RCC_OscConfig+0x93c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <HAL_RCC_OscConfig+0x93c>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013de:	f7ff f8ef 	bl	80005c0 <HAL_GetTick>
 80013e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff f8ea 	bl	80005c0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e3b1      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_RCC_OscConfig+0x93c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0ef      	beq.n	80013e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10d      	bne.n	8001434 <HAL_RCC_OscConfig+0x940>
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a02      	ldr	r2, [pc, #8]	; (8001428 <HAL_RCC_OscConfig+0x934>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e03c      	b.n	80014a0 <HAL_RCC_OscConfig+0x9ac>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	10908120 	.word	0x10908120
 8001430:	40007000 	.word	0x40007000
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x96a>
 8001444:	4bc1      	ldr	r3, [pc, #772]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4ac0      	ldr	r2, [pc, #768]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6213      	str	r3, [r2, #32]
 8001450:	4bbe      	ldr	r3, [pc, #760]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4abd      	ldr	r2, [pc, #756]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001456:	f023 0304 	bic.w	r3, r3, #4
 800145a:	6213      	str	r3, [r2, #32]
 800145c:	e020      	b.n	80014a0 <HAL_RCC_OscConfig+0x9ac>
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b05      	cmp	r3, #5
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x994>
 800146e:	4bb7      	ldr	r3, [pc, #732]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4ab6      	ldr	r2, [pc, #728]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	4bb4      	ldr	r3, [pc, #720]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4ab3      	ldr	r2, [pc, #716]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0x9ac>
 8001488:	4bb0      	ldr	r3, [pc, #704]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4aaf      	ldr	r2, [pc, #700]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6213      	str	r3, [r2, #32]
 8001494:	4bad      	ldr	r3, [pc, #692]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4aac      	ldr	r2, [pc, #688]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 800149a:	f023 0304 	bic.w	r3, r3, #4
 800149e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8081 	beq.w	80015b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f885 	bl	80005c0 <HAL_GetTick>
 80014b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014bc:	f7ff f880 	bl	80005c0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e345      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014dc:	2202      	movs	r2, #2
 80014de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001500:	2202      	movs	r2, #2
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800151a:	601a      	str	r2, [r3, #0]
  return result;
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001524:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	095b      	lsrs	r3, r3, #5
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0xa4c>
 800153a:	4b84      	ldr	r3, [pc, #528]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	e013      	b.n	8001568 <HAL_RCC_OscConfig+0xa74>
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001548:	2202      	movs	r2, #2
 800154a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fa93 f2a3 	rbit	r2, r3
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4b79      	ldr	r3, [pc, #484]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800156c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001570:	2102      	movs	r1, #2
 8001572:	6011      	str	r1, [r2, #0]
 8001574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001578:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	fa92 f1a2 	rbit	r1, r2
 8001582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001586:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800158a:	6011      	str	r1, [r2, #0]
  return result;
 800158c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001590:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	fab2 f282 	clz	r2, r2
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	f002 021f 	and.w	r2, r2, #31
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d084      	beq.n	80014bc <HAL_RCC_OscConfig+0x9c8>
 80015b2:	e07f      	b.n	80016b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f804 	bl	80005c0 <HAL_GetTick>
 80015b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7fe ffff 	bl	80005c0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e2c4      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80015de:	2202      	movs	r2, #2
 80015e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	fa93 f2a3 	rbit	r2, r3
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800161c:	601a      	str	r2, [r3, #0]
  return result;
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001626:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0xb4e>
 800163c:	4b43      	ldr	r3, [pc, #268]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	e013      	b.n	800166a <HAL_RCC_OscConfig+0xb76>
 8001642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001646:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800164a:	2202      	movs	r2, #2
 800164c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	fa93 f2a3 	rbit	r2, r3
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800166e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001672:	2102      	movs	r1, #2
 8001674:	6011      	str	r1, [r2, #0]
 8001676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800167a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	fa92 f1a2 	rbit	r1, r2
 8001684:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001688:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800168c:	6011      	str	r1, [r2, #0]
  return result;
 800168e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001692:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	fab2 f282 	clz	r2, r2
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	f002 021f 	and.w	r2, r2, #31
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f202 	lsl.w	r2, r1, r2
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d184      	bne.n	80015be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a22      	ldr	r2, [pc, #136]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 80016c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8242 	beq.w	8001b5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_RCC_OscConfig+0xc58>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	f000 8213 	beq.w	8001b0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	f040 8162 	bne.w	80019be <HAL_RCC_OscConfig+0xeca>
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001702:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f2a3 	rbit	r2, r3
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800171e:	601a      	str	r2, [r3, #0]
  return result;
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001728:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	461a      	mov	r2, r3
 800173c:	2300      	movs	r3, #0
 800173e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7fe ff3e 	bl	80005c0 <HAL_GetTick>
 8001744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001748:	e00c      	b.n	8001764 <HAL_RCC_OscConfig+0xc70>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001750:	f7fe ff36 	bl	80005c0 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1fd      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800176c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fa93 f2a3 	rbit	r2, r3
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001788:	601a      	str	r2, [r3, #0]
  return result;
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001792:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0xcba>
 80017a8:	4bb0      	ldr	r3, [pc, #704]	; (8001a6c <HAL_RCC_OscConfig+0xf78>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	e027      	b.n	80017fe <HAL_RCC_OscConfig+0xd0a>
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80017dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	4b9c      	ldr	r3, [pc, #624]	; (8001a6c <HAL_RCC_OscConfig+0xf78>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001802:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001806:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800180a:	6011      	str	r1, [r2, #0]
 800180c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001810:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	fa92 f1a2 	rbit	r1, r2
 800181a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800181e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001822:	6011      	str	r1, [r2, #0]
  return result;
 8001824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001828:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	fab2 f282 	clz	r2, r2
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f042 0220 	orr.w	r2, r2, #32
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f002 021f 	and.w	r2, r2, #31
 800183e:	2101      	movs	r1, #1
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d182      	bne.n	8001750 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184a:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <HAL_RCC_OscConfig+0xf78>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	430b      	orrs	r3, r1
 800186c:	497f      	ldr	r1, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0xf78>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800187a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800187e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fa93 f2a3 	rbit	r2, r3
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001896:	601a      	str	r2, [r3, #0]
  return result;
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	2301      	movs	r3, #1
 80018b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7fe fe82 	bl	80005c0 <HAL_GetTick>
 80018bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c0:	e009      	b.n	80018d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7fe fe7d 	bl	80005c0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e144      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80018de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001904:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	095b      	lsrs	r3, r3, #5
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0xe2c>
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <HAL_RCC_OscConfig+0xf78>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e027      	b.n	8001970 <HAL_RCC_OscConfig+0xe7c>
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800194e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <HAL_RCC_OscConfig+0xf78>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001974:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001978:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800197c:	6011      	str	r1, [r2, #0]
 800197e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001982:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	fa92 f1a2 	rbit	r1, r2
 800198c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001990:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001994:	6011      	str	r1, [r2, #0]
  return result;
 8001996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	fab2 f282 	clz	r2, r2
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	f042 0220 	orr.w	r2, r2, #32
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	f002 021f 	and.w	r2, r2, #31
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f202 	lsl.w	r2, r1, r2
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d082      	beq.n	80018c2 <HAL_RCC_OscConfig+0xdce>
 80019bc:	e0cf      	b.n	8001b5e <HAL_RCC_OscConfig+0x106a>
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80019e2:	601a      	str	r2, [r3, #0]
  return result;
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80019ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	461a      	mov	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7fe fddc 	bl	80005c0 <HAL_GetTick>
 8001a08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0c:	e009      	b.n	8001a22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7fe fdd7 	bl	80005c0 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e09e      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a46:	601a      	str	r2, [r3, #0]
  return result;
 8001a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d104      	bne.n	8001a70 <HAL_RCC_OscConfig+0xf7c>
 8001a66:	4b01      	ldr	r3, [pc, #4]	; (8001a6c <HAL_RCC_OscConfig+0xf78>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	e029      	b.n	8001ac0 <HAL_RCC_OscConfig+0xfcc>
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_RCC_OscConfig+0x1078>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ac8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001acc:	6011      	str	r1, [r2, #0]
 8001ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fa92 f1a2 	rbit	r1, r2
 8001adc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ae4:	6011      	str	r1, [r2, #0]
  return result;
 8001ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	fab2 f282 	clz	r2, r2
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f002 021f 	and.w	r2, r2, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d180      	bne.n	8001a0e <HAL_RCC_OscConfig+0xf1a>
 8001b0c:	e027      	b.n	8001b5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e01e      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_OscConfig+0x1078>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d10b      	bne.n	8001b5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09e      	sub	sp, #120	; 0x78
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e162      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b90      	ldr	r3, [pc, #576]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	498b      	ldr	r1, [pc, #556]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e14a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	497f      	ldr	r1, [pc, #508]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80dc 	beq.w	8001d9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d13c      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xf6>
 8001bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xa6>
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e00f      	b.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
 8001c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	667b      	str	r3, [r7, #100]	; 0x64
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
 8001c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c3e:	fa92 f2a2 	rbit	r2, r2
 8001c42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f002 021f 	and.w	r2, r2, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d17b      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0f3      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d13c      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x178>
 8001c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x128>
 8001c92:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x148>
 8001c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d13a      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b2      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x1a0>
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e00d      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1bc>
 8001d10:	2302      	movs	r3, #2
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	61ba      	str	r2, [r7, #24]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	fa92 f2a2 	rbit	r2, r2
 8001d36:	617a      	str	r2, [r7, #20]
  return result;
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	fab2 f282 	clz	r2, r2
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f002 021f 	and.w	r2, r2, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e079      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	491a      	ldr	r1, [pc, #104]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7fe fc28 	bl	80005c0 <HAL_GetTick>
 8001d70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7fe fc24 	bl	80005c0 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e061      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d214      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4906      	ldr	r1, [pc, #24]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e040      	b.n	8001e4e <HAL_RCC_ClockConfig+0x2de>
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	491a      	ldr	r1, [pc, #104]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4912      	ldr	r1, [pc, #72]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e12:	f000 f829 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_RCC_ClockConfig+0x2e8>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e20:	22f0      	movs	r2, #240	; 0xf0
 8001e22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	fa92 f2a2 	rbit	r2, r2
 8001e2a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	fab2 f282 	clz	r2, r2
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	40d3      	lsrs	r3, r2
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x2ec>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_RCC_ClockConfig+0x2f0>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_RCC_ClockConfig+0x2f4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe faba 	bl	80003c0 <HAL_InitTick>
  
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3778      	adds	r7, #120	; 0x78
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	080052a0 	.word	0x080052a0
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_GetSysClockFreq+0x94>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x30>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x36>
 8001e96:	e026      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9a:	613b      	str	r3, [r7, #16]
      break;
 8001e9c:	e026      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001eac:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_RCC_GetSysClockFreq+0x94>)
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e004      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
      break;
 8001ee4:	e002      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee8:	613b      	str	r3, [r7, #16]
      break;
 8001eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eec:	693b      	ldr	r3, [r7, #16]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	007a1200 	.word	0x007a1200
 8001f04:	080052b8 	.word	0x080052b8
 8001f08:	080052c8 	.word	0x080052c8
 8001f0c:	003d0900 	.word	0x003d0900

08001f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000

08001f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f2e:	f7ff ffef 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f32:	4601      	mov	r1, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	fa92 f2a2 	rbit	r2, r2
 8001f48:	603a      	str	r2, [r7, #0]
  return result;
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	40d3      	lsrs	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	080052b0 	.word	0x080052b0

08001f6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	220f      	movs	r2, #15
 8001f7a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_RCC_GetClockConfig+0x60>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0207 	and.w	r2, r3, #7
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	601a      	str	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e049      	b.n	8002076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f841 	bl	800207e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3304      	adds	r3, #4
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f000 f9d4 	bl	80023bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d001      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e04a      	b.n	8002142 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <HAL_TIM_Base_Start_IT+0xbc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d018      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x6c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d013      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x6c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_TIM_Base_Start_IT+0xc0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x6c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_TIM_Base_Start_IT+0xc4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x6c>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_TIM_Base_Start_IT+0xc8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x6c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_TIM_Base_Start_IT+0xcc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d115      	bne.n	800212c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_TIM_Base_Start_IT+0xd0>)
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d015      	beq.n	800213e <HAL_TIM_Base_Start_IT+0xaa>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d011      	beq.n	800213e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212a:	e008      	b.n	800213e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e000      	b.n	8002140 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40013400 	.word	0x40013400
 8002160:	40014000 	.word	0x40014000
 8002164:	00010007 	.word	0x00010007

08002168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d020      	beq.n	80021cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01b      	beq.n	80021cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0202 	mvn.w	r2, #2
 800219c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8e4 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8d6 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f8e7 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d020      	beq.n	8002218 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01b      	beq.n	8002218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0204 	mvn.w	r2, #4
 80021e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8be 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002204:	e005      	b.n	8002212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8b0 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f8c1 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d020      	beq.n	8002264 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0208 	mvn.w	r2, #8
 8002234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2204      	movs	r2, #4
 800223a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f898 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f88a 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f89b 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d020      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01b      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0210 	mvn.w	r2, #16
 8002280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2208      	movs	r2, #8
 8002286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f872 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f864 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f875 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0201 	mvn.w	r2, #1
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe f836 	bl	8000340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f908 	bl	8002508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00c      	beq.n	800231c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f900 	bl	800251c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00c      	beq.n	8002340 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f834 	bl	80023a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0220 	mvn.w	r2, #32
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8c8 	bl	80024f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a42      	ldr	r2, [pc, #264]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00f      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023da:	d00b      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3f      	ldr	r2, [pc, #252]	; (80024dc <TIM_Base_SetConfig+0x120>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3e      	ldr	r2, [pc, #248]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0x38>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3d      	ldr	r2, [pc, #244]	; (80024e4 <TIM_Base_SetConfig+0x128>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a33      	ldr	r2, [pc, #204]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01b      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d017      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a30      	ldr	r2, [pc, #192]	; (80024dc <TIM_Base_SetConfig+0x120>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00f      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a2e      	ldr	r2, [pc, #184]	; (80024e4 <TIM_Base_SetConfig+0x128>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00b      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <TIM_Base_SetConfig+0x12c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <TIM_Base_SetConfig+0x130>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d003      	beq.n	8002446 <TIM_Base_SetConfig+0x8a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2b      	ldr	r2, [pc, #172]	; (80024f0 <TIM_Base_SetConfig+0x134>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d108      	bne.n	8002458 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00f      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <TIM_Base_SetConfig+0x128>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00b      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <TIM_Base_SetConfig+0x12c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a15      	ldr	r2, [pc, #84]	; (80024ec <TIM_Base_SetConfig+0x130>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_Base_SetConfig+0xe8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <TIM_Base_SetConfig+0x134>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f023 0201 	bic.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]
  }
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40000800 	.word	0x40000800
 80024e4:	40013400 	.word	0x40013400
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40014400 	.word	0x40014400
 80024f0:	40014800 	.word	0x40014800

080024f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002536:	f3ef 8305 	mrs	r3, IPSR
 800253a:	60bb      	str	r3, [r7, #8]
  return(result);
 800253c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002542:	f3ef 8310 	mrs	r3, PRIMASK
 8002546:	607b      	str	r3, [r7, #4]
  return(result);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <osKernelInitialize+0x32>
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <osKernelInitialize+0x64>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d109      	bne.n	800256a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002556:	f3ef 8311 	mrs	r3, BASEPRI
 800255a:	603b      	str	r3, [r7, #0]
  return(result);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002562:	f06f 0305 	mvn.w	r3, #5
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e00c      	b.n	8002584 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <osKernelInitialize+0x64>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <osKernelInitialize+0x64>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e002      	b.n	8002584 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002582:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200000e8 	.word	0x200000e8

08002598 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800259e:	f3ef 8305 	mrs	r3, IPSR
 80025a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80025a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10f      	bne.n	80025ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025aa:	f3ef 8310 	mrs	r3, PRIMASK
 80025ae:	607b      	str	r3, [r7, #4]
  return(result);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <osKernelStart+0x32>
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <osKernelStart+0x64>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d109      	bne.n	80025d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025be:	f3ef 8311 	mrs	r3, BASEPRI
 80025c2:	603b      	str	r3, [r7, #0]
  return(result);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80025ca:	f06f 0305 	mvn.w	r3, #5
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e00e      	b.n	80025f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <osKernelStart+0x64>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <osKernelStart+0x64>)
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80025e0:	f001 f898 	bl	8003714 <vTaskStartScheduler>
      stat = osOK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e002      	b.n	80025f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025f0:	68fb      	ldr	r3, [r7, #12]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200000e8 	.word	0x200000e8

08002600 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b092      	sub	sp, #72	; 0x48
 8002604:	af04      	add	r7, sp, #16
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002610:	f3ef 8305 	mrs	r3, IPSR
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 8094 	bne.w	8002746 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	623b      	str	r3, [r7, #32]
  return(result);
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 808d 	bne.w	8002746 <osThreadNew+0x146>
 800262c:	4b48      	ldr	r3, [pc, #288]	; (8002750 <osThreadNew+0x150>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d106      	bne.n	8002642 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002634:	f3ef 8311 	mrs	r3, BASEPRI
 8002638:	61fb      	str	r3, [r7, #28]
  return(result);
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 8082 	bne.w	8002746 <osThreadNew+0x146>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d07e      	beq.n	8002746 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800264c:	2318      	movs	r3, #24
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002650:	2300      	movs	r3, #0
 8002652:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002654:	f107 031b 	add.w	r3, r7, #27
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d045      	beq.n	80026f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <osThreadNew+0x74>
        name = attr->name;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <osThreadNew+0x9a>
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2b38      	cmp	r3, #56	; 0x38
 800268c:	d805      	bhi.n	800269a <osThreadNew+0x9a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <osThreadNew+0x9e>
        return (NULL);
 800269a:	2300      	movs	r3, #0
 800269c:	e054      	b.n	8002748 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00e      	beq.n	80026d4 <osThreadNew+0xd4>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2bbb      	cmp	r3, #187	; 0xbb
 80026bc:	d90a      	bls.n	80026d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <osThreadNew+0xd4>
        mem = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d2:	e010      	b.n	80026f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10c      	bne.n	80026f6 <osThreadNew+0xf6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d108      	bne.n	80026f6 <osThreadNew+0xf6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <osThreadNew+0xf6>
          mem = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f0:	e001      	b.n	80026f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d110      	bne.n	800271e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002704:	9202      	str	r2, [sp, #8]
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fe1a 	bl	800334c <xTaskCreateStatic>
 8002718:	4603      	mov	r3, r0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e013      	b.n	8002746 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	d110      	bne.n	8002746 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	b29a      	uxth	r2, r3
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fe64 	bl	8003404 <xTaskCreate>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d001      	beq.n	8002746 <osThreadNew+0x146>
          hTask = NULL;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002746:	697b      	ldr	r3, [r7, #20]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3738      	adds	r7, #56	; 0x38
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200000e8 	.word	0x200000e8

08002754 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800275c:	f3ef 8305 	mrs	r3, IPSR
 8002760:	613b      	str	r3, [r7, #16]
  return(result);
 8002762:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10f      	bne.n	8002788 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002768:	f3ef 8310 	mrs	r3, PRIMASK
 800276c:	60fb      	str	r3, [r7, #12]
  return(result);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <osDelay+0x34>
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <osDelay+0x58>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d109      	bne.n	8002790 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800277c:	f3ef 8311 	mrs	r3, BASEPRI
 8002780:	60bb      	str	r3, [r7, #8]
  return(result);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <osDelay+0x3c>
    stat = osErrorISR;
 8002788:	f06f 0305 	mvn.w	r3, #5
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e007      	b.n	80027a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 ff86 	bl	80036ac <vTaskDelay>
    }
  }

  return (stat);
 80027a0:	697b      	ldr	r3, [r7, #20]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200000e8 	.word	0x200000e8

080027b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a07      	ldr	r2, [pc, #28]	; (80027dc <vApplicationGetIdleTaskMemory+0x2c>)
 80027c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <vApplicationGetIdleTaskMemory+0x30>)
 80027c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	200000ec 	.word	0x200000ec
 80027e0:	200001a8 	.word	0x200001a8

080027e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a07      	ldr	r2, [pc, #28]	; (8002810 <vApplicationGetTimerTaskMemory+0x2c>)
 80027f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4a06      	ldr	r2, [pc, #24]	; (8002814 <vApplicationGetTimerTaskMemory+0x30>)
 80027fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	200003a8 	.word	0x200003a8
 8002814:	20000464 	.word	0x20000464

08002818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 0208 	add.w	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f103 0208 	add.w	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f103 0208 	add.w	r2, r3, #8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d0:	d103      	bne.n	80028da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e00c      	b.n	80028f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3308      	adds	r3, #8
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e002      	b.n	80028e8 <vListInsert+0x2e>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d2f6      	bcs.n	80028e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6892      	ldr	r2, [r2, #8]
 8002942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6852      	ldr	r2, [r2, #4]
 800294c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d103      	bne.n	8002960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029aa:	f002 f83b 	bl	8004a24 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	441a      	add	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	3b01      	subs	r3, #1
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	441a      	add	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d114      	bne.n	8002a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f001 f91f 	bl	8003c50 <xTaskRemoveFromEventList>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d012      	beq.n	8002a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <xQueueGenericReset+0xcc>)
 8002a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	e009      	b.n	8002a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fef2 	bl	8002818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3324      	adds	r3, #36	; 0x24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff feed 	bl	8002818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a3e:	f002 f821 	bl	8004a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	; 0x38
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <xQueueGenericCreateStatic+0x52>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <xQueueGenericCreateStatic+0x56>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <xQueueGenericCreateStatic+0x58>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	623b      	str	r3, [r7, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <xQueueGenericCreateStatic+0x7e>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <xQueueGenericCreateStatic+0x82>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <xQueueGenericCreateStatic+0x84>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	61fb      	str	r3, [r7, #28]
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aee:	2350      	movs	r3, #80	; 0x50
 8002af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b50      	cmp	r3, #80	; 0x50
 8002af6:	d00a      	beq.n	8002b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	61bb      	str	r3, [r7, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f805 	bl	8002b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3730      	adds	r7, #48	; 0x30
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e002      	b.n	8002b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	f7ff ff06 	bl	8002980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08e      	sub	sp, #56	; 0x38
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b92:	2300      	movs	r3, #0
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueGenericSend+0x32>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <xQueueGenericSend+0x40>
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <xQueueGenericSend+0x44>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <xQueueGenericSend+0x46>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <xQueueGenericSend+0x60>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d103      	bne.n	8002bf2 <xQueueGenericSend+0x6e>
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <xQueueGenericSend+0x72>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <xQueueGenericSend+0x74>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericSend+0x8e>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	623b      	str	r3, [r7, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c12:	f001 f9e5 	bl	8003fe0 <xTaskGetSchedulerState>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <xQueueGenericSend+0x9e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <xQueueGenericSend+0xa2>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <xQueueGenericSend+0xa4>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	61fb      	str	r3, [r7, #28]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c42:	f001 feef 	bl	8004a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <xQueueGenericSend+0xd4>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d129      	bne.n	8002cac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c5e:	f000 fa07 	bl	8003070 <prvCopyDataToQueue>
 8002c62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	3324      	adds	r3, #36	; 0x24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 ffed 	bl	8003c50 <xTaskRemoveFromEventList>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <xQueueGenericSend+0x1f8>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	e00a      	b.n	8002ca4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c94:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <xQueueGenericSend+0x1f8>)
 8002c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ca4:	f001 feee 	bl	8004a84 <vPortExitCritical>
				return pdPASS;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e063      	b.n	8002d74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cb2:	f001 fee7 	bl	8004a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e05c      	b.n	8002d74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d106      	bne.n	8002cce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f827 	bl	8003d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cce:	f001 fed9 	bl	8004a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cd2:	f000 fd8f 	bl	80037f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cd6:	f001 fea5 	bl	8004a24 <vPortEnterCritical>
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce6:	d103      	bne.n	8002cf0 <xQueueGenericSend+0x16c>
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfc:	d103      	bne.n	8002d06 <xQueueGenericSend+0x182>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d06:	f001 febd 	bl	8004a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d0a:	1d3a      	adds	r2, r7, #4
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 f816 	bl	8003d44 <xTaskCheckForTimeOut>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d124      	bne.n	8002d68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d20:	f000 fa9e 	bl	8003260 <prvIsQueueFull>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	3310      	adds	r3, #16
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 ff3c 	bl	8003bb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d3a:	f000 fa29 	bl	8003190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d3e:	f000 fd67 	bl	8003810 <xTaskResumeAll>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f47f af7c 	bne.w	8002c42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <xQueueGenericSend+0x1f8>)
 8002d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	e772      	b.n	8002c42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5e:	f000 fa17 	bl	8003190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d62:	f000 fd55 	bl	8003810 <xTaskResumeAll>
 8002d66:	e76c      	b.n	8002c42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6a:	f000 fa11 	bl	8003190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d6e:	f000 fd4f 	bl	8003810 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d72:	2300      	movs	r3, #0
		}
	}
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3738      	adds	r7, #56	; 0x38
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	e000ed04 	.word	0xe000ed04

08002d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	; 0x38
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d103      	bne.n	8002dbc <xQueueGenericSendFromISR+0x3c>
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <xQueueGenericSendFromISR+0x40>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <xQueueGenericSendFromISR+0x42>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	623b      	str	r3, [r7, #32]
}
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d103      	bne.n	8002dea <xQueueGenericSendFromISR+0x6a>
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <xQueueGenericSendFromISR+0x6e>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <xQueueGenericSendFromISR+0x70>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	61fb      	str	r3, [r7, #28]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e0a:	f001 feed 	bl	8004be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	61ba      	str	r2, [r7, #24]
 8002e24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <xQueueGenericSendFromISR+0xbc>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d12c      	bne.n	8002e96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4c:	f000 f910 	bl	8003070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e58:	d112      	bne.n	8002e80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	3324      	adds	r3, #36	; 0x24
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fef2 	bl	8003c50 <xTaskRemoveFromEventList>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00e      	beq.n	8002e90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e007      	b.n	8002e90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e84:	3301      	adds	r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	b25a      	sxtb	r2, r3
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e90:	2301      	movs	r3, #1
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e94:	e001      	b.n	8002e9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3738      	adds	r7, #56	; 0x38
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <xQueueReceive+0x30>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	623b      	str	r3, [r7, #32]
}
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <xQueueReceive+0x3e>
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <xQueueReceive+0x42>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <xQueueReceive+0x44>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <xQueueReceive+0x5e>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	61fb      	str	r3, [r7, #28]
}
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f0e:	f001 f867 	bl	8003fe0 <xTaskGetSchedulerState>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <xQueueReceive+0x6e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <xQueueReceive+0x72>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <xQueueReceive+0x74>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueReceive+0x8e>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	61bb      	str	r3, [r7, #24]
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f3e:	f001 fd71 	bl	8004a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01f      	beq.n	8002f8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f52:	f000 f8f7 	bl	8003144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1e5a      	subs	r2, r3, #1
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00f      	beq.n	8002f86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	3310      	adds	r3, #16
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fe70 	bl	8003c50 <xTaskRemoveFromEventList>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <xQueueReceive+0x1bc>)
 8002f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f86:	f001 fd7d 	bl	8004a84 <vPortExitCritical>
				return pdPASS;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e069      	b.n	8003062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f94:	f001 fd76 	bl	8004a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e062      	b.n	8003062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 feb6 	bl	8003d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fb0:	f001 fd68 	bl	8004a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fb4:	f000 fc1e 	bl	80037f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fb8:	f001 fd34 	bl	8004a24 <vPortEnterCritical>
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc8:	d103      	bne.n	8002fd2 <xQueueReceive+0x122>
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd8:	b25b      	sxtb	r3, r3
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fde:	d103      	bne.n	8002fe8 <xQueueReceive+0x138>
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe8:	f001 fd4c 	bl	8004a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fec:	1d3a      	adds	r2, r7, #4
 8002fee:	f107 0310 	add.w	r3, r7, #16
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fea5 	bl	8003d44 <xTaskCheckForTimeOut>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d123      	bne.n	8003048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003002:	f000 f917 	bl	8003234 <prvIsQueueEmpty>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d017      	beq.n	800303c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	3324      	adds	r3, #36	; 0x24
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fdcb 	bl	8003bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800301a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800301c:	f000 f8b8 	bl	8003190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003020:	f000 fbf6 	bl	8003810 <xTaskResumeAll>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d189      	bne.n	8002f3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <xQueueReceive+0x1bc>)
 800302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	e780      	b.n	8002f3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800303c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800303e:	f000 f8a7 	bl	8003190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003042:	f000 fbe5 	bl	8003810 <xTaskResumeAll>
 8003046:	e77a      	b.n	8002f3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304a:	f000 f8a1 	bl	8003190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800304e:	f000 fbdf 	bl	8003810 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003054:	f000 f8ee 	bl	8003234 <prvIsQueueEmpty>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	f43f af6f 	beq.w	8002f3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003062:	4618      	mov	r0, r3
 8003064:	3730      	adds	r7, #48	; 0x30
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d14d      	bne.n	8003132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 ffbe 	bl	800401c <xTaskPriorityDisinherit>
 80030a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	e043      	b.n	8003132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d119      	bne.n	80030e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6898      	ldr	r0, [r3, #8]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	461a      	mov	r2, r3
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	f001 ffd4 	bl	8005068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	441a      	add	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d32b      	bcc.n	8003132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	e026      	b.n	8003132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68d8      	ldr	r0, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	461a      	mov	r2, r3
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	f001 ffba 	bl	8005068 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	425b      	negs	r3, r3
 80030fe:	441a      	add	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d207      	bcs.n	8003120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	425b      	negs	r3, r3
 800311a:	441a      	add	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d105      	bne.n	8003132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	3b01      	subs	r3, #1
 8003130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800313a:	697b      	ldr	r3, [r7, #20]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d018      	beq.n	8003188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d303      	bcc.n	8003178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68d9      	ldr	r1, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	461a      	mov	r2, r3
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	f001 ff70 	bl	8005068 <memcpy>
	}
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003198:	f001 fc44 	bl	8004a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031a4:	e011      	b.n	80031ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d012      	beq.n	80031d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3324      	adds	r3, #36	; 0x24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fd4c 	bl	8003c50 <xTaskRemoveFromEventList>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031be:	f000 fe23 	bl	8003e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	dce9      	bgt.n	80031a6 <prvUnlockQueue+0x16>
 80031d2:	e000      	b.n	80031d6 <prvUnlockQueue+0x46>
					break;
 80031d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031de:	f001 fc51 	bl	8004a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031e2:	f001 fc1f 	bl	8004a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031ee:	e011      	b.n	8003214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d012      	beq.n	800321e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3310      	adds	r3, #16
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fd27 	bl	8003c50 <xTaskRemoveFromEventList>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003208:	f000 fdfe 	bl	8003e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800320c:	7bbb      	ldrb	r3, [r7, #14]
 800320e:	3b01      	subs	r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003218:	2b00      	cmp	r3, #0
 800321a:	dce9      	bgt.n	80031f0 <prvUnlockQueue+0x60>
 800321c:	e000      	b.n	8003220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800321e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003228:	f001 fc2c 	bl	8004a84 <vPortExitCritical>
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800323c:	f001 fbf2 	bl	8004a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e001      	b.n	8003252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003252:	f001 fc17 	bl	8004a84 <vPortExitCritical>

	return xReturn;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003268:	f001 fbdc 	bl	8004a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	429a      	cmp	r2, r3
 8003276:	d102      	bne.n	800327e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003278:	2301      	movs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e001      	b.n	8003282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003282:	f001 fbff 	bl	8004a84 <vPortExitCritical>

	return xReturn;
 8003286:	68fb      	ldr	r3, [r7, #12]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e014      	b.n	80032ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <vQueueAddToRegistry+0x50>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032ac:	490c      	ldr	r1, [pc, #48]	; (80032e0 <vQueueAddToRegistry+0x50>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <vQueueAddToRegistry+0x50>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032c2:	e006      	b.n	80032d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b07      	cmp	r3, #7
 80032ce:	d9e7      	bls.n	80032a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000864 	.word	0x20000864

080032e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032f4:	f001 fb96 	bl	8004a24 <vPortEnterCritical>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003304:	d103      	bne.n	800330e <vQueueWaitForMessageRestricted+0x2a>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003314:	b25b      	sxtb	r3, r3
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331a:	d103      	bne.n	8003324 <vQueueWaitForMessageRestricted+0x40>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003324:	f001 fbae 	bl	8004a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3324      	adds	r3, #36	; 0x24
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fc5d 	bl	8003bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff ff26 	bl	8003190 <prvUnlockQueue>
	}
 8003344:	bf00      	nop
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08e      	sub	sp, #56	; 0x38
 8003350:	af04      	add	r7, sp, #16
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	623b      	str	r3, [r7, #32]
}
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <xTaskCreateStatic+0x46>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	61fb      	str	r3, [r7, #28]
}
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003392:	23bc      	movs	r3, #188	; 0xbc
 8003394:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2bbc      	cmp	r3, #188	; 0xbc
 800339a:	d00a      	beq.n	80033b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	61bb      	str	r3, [r7, #24]
}
 80033ae:	bf00      	nop
 80033b0:	e7fe      	b.n	80033b0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01e      	beq.n	80033f6 <xTaskCreateStatic+0xaa>
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01b      	beq.n	80033f6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033d0:	2300      	movs	r3, #0
 80033d2:	9303      	str	r3, [sp, #12]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	9302      	str	r3, [sp, #8]
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f851 	bl	8003490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f0:	f000 f8ec 	bl	80035cc <prvAddNewTaskToReadyList>
 80033f4:	e001      	b.n	80033fa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033fa:	697b      	ldr	r3, [r7, #20]
	}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	; 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08c      	sub	sp, #48	; 0x30
 8003408:	af04      	add	r7, sp, #16
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f001 fc25 	bl	8004c68 <pvPortMalloc>
 800341e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00e      	beq.n	8003444 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003426:	20bc      	movs	r0, #188	; 0xbc
 8003428:	f001 fc1e 	bl	8004c68 <pvPortMalloc>
 800342c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
 800343a:	e005      	b.n	8003448 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800343c:	6978      	ldr	r0, [r7, #20]
 800343e:	f001 fcd7 	bl	8004df0 <vPortFree>
 8003442:	e001      	b.n	8003448 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d017      	beq.n	800347e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	2300      	movs	r3, #0
 800345a:	9303      	str	r3, [sp, #12]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f80f 	bl	8003490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003472:	69f8      	ldr	r0, [r7, #28]
 8003474:	f000 f8aa 	bl	80035cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003478:	2301      	movs	r3, #1
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e002      	b.n	8003484 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003482:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003484:	69bb      	ldr	r3, [r7, #24]
	}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	21a5      	movs	r1, #165	; 0xa5
 80034aa:	f001 fdeb 	bl	8005084 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034b8:	3b01      	subs	r3, #1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	617b      	str	r3, [r7, #20]
}
 80034e4:	bf00      	nop
 80034e6:	e7fe      	b.n	80034e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e012      	b.n	8003514 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	7819      	ldrb	r1, [r3, #0]
 80034f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	3334      	adds	r3, #52	; 0x34
 80034fe:	460a      	mov	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b0f      	cmp	r3, #15
 8003518:	d9e9      	bls.n	80034ee <prvInitialiseNewTask+0x5e>
 800351a:	e000      	b.n	800351e <prvInitialiseNewTask+0x8e>
		{
			break;
 800351c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	2b37      	cmp	r3, #55	; 0x37
 800352a:	d901      	bls.n	8003530 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800352c:	2337      	movs	r3, #55	; 0x37
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	2200      	movs	r2, #0
 8003540:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f986 	bl	8002858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	3318      	adds	r3, #24
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f981 	bl	8002858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	2200      	movs	r2, #0
 8003570:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	2200      	movs	r2, #0
 8003578:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	3354      	adds	r3, #84	; 0x54
 8003580:	2260      	movs	r2, #96	; 0x60
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f001 fd7d 	bl	8005084 <memset>
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <prvInitialiseNewTask+0x130>)
 800358e:	659a      	str	r2, [r3, #88]	; 0x58
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <prvInitialiseNewTask+0x134>)
 8003594:	65da      	str	r2, [r3, #92]	; 0x5c
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <prvInitialiseNewTask+0x138>)
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	68f9      	ldr	r1, [r7, #12]
 80035a0:	69b8      	ldr	r0, [r7, #24]
 80035a2:	f001 f90f 	bl	80047c4 <pxPortInitialiseStack>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035b8:	bf00      	nop
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	080052f8 	.word	0x080052f8
 80035c4:	08005318 	.word	0x08005318
 80035c8:	080052d8 	.word	0x080052d8

080035cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035d4:	f001 fa26 	bl	8004a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <prvAddNewTaskToReadyList+0xc4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <prvAddNewTaskToReadyList+0xc4>)
 80035e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <prvAddNewTaskToReadyList+0xc8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035ea:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <prvAddNewTaskToReadyList+0xc8>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <prvAddNewTaskToReadyList+0xc4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d110      	bne.n	800361a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035f8:	f000 fc2a 	bl	8003e50 <prvInitialiseTaskLists>
 80035fc:	e00d      	b.n	800361a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <prvAddNewTaskToReadyList+0xcc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <prvAddNewTaskToReadyList+0xc8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	429a      	cmp	r2, r3
 8003612:	d802      	bhi.n	800361a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <prvAddNewTaskToReadyList+0xc8>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <prvAddNewTaskToReadyList+0xd0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <prvAddNewTaskToReadyList+0xd0>)
 8003622:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <prvAddNewTaskToReadyList+0xd0>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <prvAddNewTaskToReadyList+0xd4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d903      	bls.n	8003640 <prvAddNewTaskToReadyList+0x74>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <prvAddNewTaskToReadyList+0xd4>)
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <prvAddNewTaskToReadyList+0xd8>)
 800364e:	441a      	add	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f7ff f90b 	bl	8002872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800365c:	f001 fa12 	bl	8004a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <prvAddNewTaskToReadyList+0xcc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00e      	beq.n	8003686 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <prvAddNewTaskToReadyList+0xc8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	429a      	cmp	r2, r3
 8003674:	d207      	bcs.n	8003686 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <prvAddNewTaskToReadyList+0xdc>)
 8003678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000d78 	.word	0x20000d78
 8003694:	200008a4 	.word	0x200008a4
 8003698:	20000d84 	.word	0x20000d84
 800369c:	20000d94 	.word	0x20000d94
 80036a0:	20000d80 	.word	0x20000d80
 80036a4:	200008a8 	.word	0x200008a8
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d017      	beq.n	80036ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <vTaskDelay+0x60>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <vTaskDelay+0x30>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	60bb      	str	r3, [r7, #8]
}
 80036d8:	bf00      	nop
 80036da:	e7fe      	b.n	80036da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036dc:	f000 f88a 	bl	80037f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fd08 	bl	80040f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036e8:	f000 f892 	bl	8003810 <xTaskResumeAll>
 80036ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <vTaskDelay+0x64>)
 80036f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000da0 	.word	0x20000da0
 8003710:	e000ed04 	.word	0xe000ed04

08003714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003722:	463a      	mov	r2, r7
 8003724:	1d39      	adds	r1, r7, #4
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff f840 	bl	80027b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	9202      	str	r2, [sp, #8]
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	2300      	movs	r3, #0
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2300      	movs	r3, #0
 8003740:	460a      	mov	r2, r1
 8003742:	4924      	ldr	r1, [pc, #144]	; (80037d4 <vTaskStartScheduler+0xc0>)
 8003744:	4824      	ldr	r0, [pc, #144]	; (80037d8 <vTaskStartScheduler+0xc4>)
 8003746:	f7ff fe01 	bl	800334c <xTaskCreateStatic>
 800374a:	4603      	mov	r3, r0
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <vTaskStartScheduler+0xc8>)
 800374e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <vTaskStartScheduler+0xc8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e001      	b.n	8003762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003768:	f000 fd1a 	bl	80041a0 <xTimerCreateTimerTask>
 800376c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d11b      	bne.n	80037ac <vTaskStartScheduler+0x98>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	613b      	str	r3, [r7, #16]
}
 8003786:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <vTaskStartScheduler+0xcc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3354      	adds	r3, #84	; 0x54
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <vTaskStartScheduler+0xd0>)
 8003790:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <vTaskStartScheduler+0xd4>)
 8003794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003798:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <vTaskStartScheduler+0xd8>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <vTaskStartScheduler+0xdc>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037a6:	f001 f89b 	bl	80048e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037aa:	e00e      	b.n	80037ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b2:	d10a      	bne.n	80037ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <vTaskStartScheduler+0xb4>
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	08005240 	.word	0x08005240
 80037d8:	08003e21 	.word	0x08003e21
 80037dc:	20000d9c 	.word	0x20000d9c
 80037e0:	200008a4 	.word	0x200008a4
 80037e4:	20000010 	.word	0x20000010
 80037e8:	20000d98 	.word	0x20000d98
 80037ec:	20000d84 	.word	0x20000d84
 80037f0:	20000d7c 	.word	0x20000d7c

080037f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <vTaskSuspendAll+0x18>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	4a03      	ldr	r2, [pc, #12]	; (800380c <vTaskSuspendAll+0x18>)
 8003800:	6013      	str	r3, [r2, #0]
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	20000da0 	.word	0x20000da0

08003810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800381a:	2300      	movs	r3, #0
 800381c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800381e:	4b42      	ldr	r3, [pc, #264]	; (8003928 <xTaskResumeAll+0x118>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <xTaskResumeAll+0x2c>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	603b      	str	r3, [r7, #0]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800383c:	f001 f8f2 	bl	8004a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <xTaskResumeAll+0x118>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3b01      	subs	r3, #1
 8003846:	4a38      	ldr	r2, [pc, #224]	; (8003928 <xTaskResumeAll+0x118>)
 8003848:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800384a:	4b37      	ldr	r3, [pc, #220]	; (8003928 <xTaskResumeAll+0x118>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d162      	bne.n	8003918 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <xTaskResumeAll+0x11c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d05e      	beq.n	8003918 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800385a:	e02f      	b.n	80038bc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <xTaskResumeAll+0x120>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3318      	adds	r3, #24
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f85f 	bl	800292c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3304      	adds	r3, #4
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff f85a 	bl	800292c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <xTaskResumeAll+0x124>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d903      	bls.n	800388c <xTaskResumeAll+0x7c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <xTaskResumeAll+0x124>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4a27      	ldr	r2, [pc, #156]	; (8003938 <xTaskResumeAll+0x128>)
 800389a:	441a      	add	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7fe ffe5 	bl	8002872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ac:	4b23      	ldr	r3, [pc, #140]	; (800393c <xTaskResumeAll+0x12c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <xTaskResumeAll+0x130>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <xTaskResumeAll+0x120>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1cb      	bne.n	800385c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038ca:	f000 fb63 	bl	8003f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <xTaskResumeAll+0x134>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d010      	beq.n	80038fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038da:	f000 f847 	bl	800396c <xTaskIncrementTick>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038e4:	4b16      	ldr	r3, [pc, #88]	; (8003940 <xTaskResumeAll+0x130>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f1      	bne.n	80038da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <xTaskResumeAll+0x134>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <xTaskResumeAll+0x130>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <xTaskResumeAll+0x138>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003918:	f001 f8b4 	bl	8004a84 <vPortExitCritical>

	return xAlreadyYielded;
 800391c:	68bb      	ldr	r3, [r7, #8]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000da0 	.word	0x20000da0
 800392c:	20000d78 	.word	0x20000d78
 8003930:	20000d38 	.word	0x20000d38
 8003934:	20000d80 	.word	0x20000d80
 8003938:	200008a8 	.word	0x200008a8
 800393c:	200008a4 	.word	0x200008a4
 8003940:	20000d8c 	.word	0x20000d8c
 8003944:	20000d88 	.word	0x20000d88
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <xTaskGetTickCount+0x1c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003958:	687b      	ldr	r3, [r7, #4]
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000d7c 	.word	0x20000d7c

0800396c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003976:	4b51      	ldr	r3, [pc, #324]	; (8003abc <xTaskIncrementTick+0x150>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 808e 	bne.w	8003a9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <xTaskIncrementTick+0x154>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003988:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <xTaskIncrementTick+0x154>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d120      	bne.n	80039d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <xTaskIncrementTick+0x158>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	603b      	str	r3, [r7, #0]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <xTaskIncrementTick+0x46>
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <xTaskIncrementTick+0x158>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <xTaskIncrementTick+0x15c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a41      	ldr	r2, [pc, #260]	; (8003ac4 <xTaskIncrementTick+0x158>)
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4a41      	ldr	r2, [pc, #260]	; (8003ac8 <xTaskIncrementTick+0x15c>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b40      	ldr	r3, [pc, #256]	; (8003acc <xTaskIncrementTick+0x160>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	4a3f      	ldr	r2, [pc, #252]	; (8003acc <xTaskIncrementTick+0x160>)
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	f000 fadf 	bl	8003f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039d6:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <xTaskIncrementTick+0x164>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d34e      	bcc.n	8003a7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e0:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <xTaskIncrementTick+0x158>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <xTaskIncrementTick+0x82>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xTaskIncrementTick+0x84>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f4:	4b36      	ldr	r3, [pc, #216]	; (8003ad0 <xTaskIncrementTick+0x164>)
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039fa:	601a      	str	r2, [r3, #0]
					break;
 80039fc:	e03f      	b.n	8003a7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <xTaskIncrementTick+0x158>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d203      	bcs.n	8003a1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a16:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <xTaskIncrementTick+0x164>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6013      	str	r3, [r2, #0]
						break;
 8003a1c:	e02f      	b.n	8003a7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	3304      	adds	r3, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe ff82 	bl	800292c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3318      	adds	r3, #24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe ff79 	bl	800292c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <xTaskIncrementTick+0x168>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d903      	bls.n	8003a4e <xTaskIncrementTick+0xe2>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <xTaskIncrementTick+0x168>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ad8 <xTaskIncrementTick+0x16c>)
 8003a5c:	441a      	add	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f7fe ff04 	bl	8002872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <xTaskIncrementTick+0x170>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d3b3      	bcc.n	80039e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a7c:	e7b0      	b.n	80039e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <xTaskIncrementTick+0x170>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	4914      	ldr	r1, [pc, #80]	; (8003ad8 <xTaskIncrementTick+0x16c>)
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d907      	bls.n	8003aa6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a96:	2301      	movs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e004      	b.n	8003aa6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a9c:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <xTaskIncrementTick+0x174>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4a0f      	ldr	r2, [pc, #60]	; (8003ae0 <xTaskIncrementTick+0x174>)
 8003aa4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <xTaskIncrementTick+0x178>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ab2:	697b      	ldr	r3, [r7, #20]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000da0 	.word	0x20000da0
 8003ac0:	20000d7c 	.word	0x20000d7c
 8003ac4:	20000d30 	.word	0x20000d30
 8003ac8:	20000d34 	.word	0x20000d34
 8003acc:	20000d90 	.word	0x20000d90
 8003ad0:	20000d98 	.word	0x20000d98
 8003ad4:	20000d80 	.word	0x20000d80
 8003ad8:	200008a8 	.word	0x200008a8
 8003adc:	200008a4 	.word	0x200008a4
 8003ae0:	20000d88 	.word	0x20000d88
 8003ae4:	20000d8c 	.word	0x20000d8c

08003ae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <vTaskSwitchContext+0xb0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <vTaskSwitchContext+0xb4>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003afc:	e046      	b.n	8003b8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003afe:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <vTaskSwitchContext+0xb4>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <vTaskSwitchContext+0xb8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e010      	b.n	8003b2e <vTaskSwitchContext+0x46>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <vTaskSwitchContext+0x40>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	607b      	str	r3, [r7, #4]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <vTaskSwitchContext+0x3e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	491d      	ldr	r1, [pc, #116]	; (8003ba4 <vTaskSwitchContext+0xbc>)
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0e4      	beq.n	8003b0c <vTaskSwitchContext+0x24>
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <vTaskSwitchContext+0xbc>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3308      	adds	r3, #8
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d104      	bne.n	8003b72 <vTaskSwitchContext+0x8a>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <vTaskSwitchContext+0xc0>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <vTaskSwitchContext+0xb8>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <vTaskSwitchContext+0xc0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3354      	adds	r3, #84	; 0x54
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <vTaskSwitchContext+0xc4>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20000da0 	.word	0x20000da0
 8003b9c:	20000d8c 	.word	0x20000d8c
 8003ba0:	20000d80 	.word	0x20000d80
 8003ba4:	200008a8 	.word	0x200008a8
 8003ba8:	200008a4 	.word	0x200008a4
 8003bac:	20000010 	.word	0x20000010

08003bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	60fb      	str	r3, [r7, #12]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <vTaskPlaceOnEventList+0x44>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3318      	adds	r3, #24
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe fe6b 	bl	80028ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be4:	2101      	movs	r1, #1
 8003be6:	6838      	ldr	r0, [r7, #0]
 8003be8:	f000 fa86 	bl	80040f8 <prvAddCurrentTaskToDelayedList>
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200008a4 	.word	0x200008a4

08003bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	617b      	str	r3, [r7, #20]
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <vTaskPlaceOnEventListRestricted+0x54>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3318      	adds	r3, #24
 8003c26:	4619      	mov	r1, r3
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7fe fe22 	bl	8002872 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f000 fa5b 	bl	80040f8 <prvAddCurrentTaskToDelayedList>
	}
 8003c42:	bf00      	nop
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200008a4 	.word	0x200008a4

08003c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60fb      	str	r3, [r7, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	3318      	adds	r3, #24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fe53 	bl	800292c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <xTaskRemoveFromEventList+0xb0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11d      	bne.n	8003cca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fe4a 	bl	800292c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <xTaskRemoveFromEventList+0xb4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d903      	bls.n	8003cac <xTaskRemoveFromEventList+0x5c>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <xTaskRemoveFromEventList+0xb4>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <xTaskRemoveFromEventList+0xb8>)
 8003cba:	441a      	add	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fe fdd5 	bl	8002872 <vListInsertEnd>
 8003cc8:	e005      	b.n	8003cd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	480e      	ldr	r0, [pc, #56]	; (8003d0c <xTaskRemoveFromEventList+0xbc>)
 8003cd2:	f7fe fdce 	bl	8002872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <xTaskRemoveFromEventList+0xc0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d905      	bls.n	8003cf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <xTaskRemoveFromEventList+0xc4>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e001      	b.n	8003cf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003cf4:	697b      	ldr	r3, [r7, #20]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000da0 	.word	0x20000da0
 8003d04:	20000d80 	.word	0x20000d80
 8003d08:	200008a8 	.word	0x200008a8
 8003d0c:	20000d38 	.word	0x20000d38
 8003d10:	200008a4 	.word	0x200008a4
 8003d14:	20000d8c 	.word	0x20000d8c

08003d18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <vTaskInternalSetTimeOutState+0x24>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <vTaskInternalSetTimeOutState+0x28>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	605a      	str	r2, [r3, #4]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000d90 	.word	0x20000d90
 8003d40:	20000d7c 	.word	0x20000d7c

08003d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	613b      	str	r3, [r7, #16]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d86:	f000 fe4d 	bl	8004a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <xTaskCheckForTimeOut+0xbc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da2:	d102      	bne.n	8003daa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	e023      	b.n	8003df2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <xTaskCheckForTimeOut+0xc0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d007      	beq.n	8003dc6 <xTaskCheckForTimeOut+0x82>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	e015      	b.n	8003df2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d20b      	bcs.n	8003de8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1ad2      	subs	r2, r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff9b 	bl	8003d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e004      	b.n	8003df2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003df2:	f000 fe47 	bl	8004a84 <vPortExitCritical>

	return xReturn;
 8003df6:	69fb      	ldr	r3, [r7, #28]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000d7c 	.word	0x20000d7c
 8003e04:	20000d90 	.word	0x20000d90

08003e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <vTaskMissedYield+0x14>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
}
 8003e12:	bf00      	nop
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	20000d8c 	.word	0x20000d8c

08003e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e28:	f000 f852 	bl	8003ed0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <prvIdleTask+0x28>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d9f9      	bls.n	8003e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <prvIdleTask+0x2c>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e44:	e7f0      	b.n	8003e28 <prvIdleTask+0x8>
 8003e46:	bf00      	nop
 8003e48:	200008a8 	.word	0x200008a8
 8003e4c:	e000ed04 	.word	0xe000ed04

08003e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	e00c      	b.n	8003e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <prvInitialiseTaskLists+0x60>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe fcd4 	bl	8002818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3301      	adds	r3, #1
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b37      	cmp	r3, #55	; 0x37
 8003e7a:	d9ef      	bls.n	8003e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e7c:	480d      	ldr	r0, [pc, #52]	; (8003eb4 <prvInitialiseTaskLists+0x64>)
 8003e7e:	f7fe fccb 	bl	8002818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e82:	480d      	ldr	r0, [pc, #52]	; (8003eb8 <prvInitialiseTaskLists+0x68>)
 8003e84:	f7fe fcc8 	bl	8002818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <prvInitialiseTaskLists+0x6c>)
 8003e8a:	f7fe fcc5 	bl	8002818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e8e:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <prvInitialiseTaskLists+0x70>)
 8003e90:	f7fe fcc2 	bl	8002818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e94:	480b      	ldr	r0, [pc, #44]	; (8003ec4 <prvInitialiseTaskLists+0x74>)
 8003e96:	f7fe fcbf 	bl	8002818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <prvInitialiseTaskLists+0x78>)
 8003e9c:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <prvInitialiseTaskLists+0x64>)
 8003e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <prvInitialiseTaskLists+0x7c>)
 8003ea2:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <prvInitialiseTaskLists+0x68>)
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	200008a8 	.word	0x200008a8
 8003eb4:	20000d08 	.word	0x20000d08
 8003eb8:	20000d1c 	.word	0x20000d1c
 8003ebc:	20000d38 	.word	0x20000d38
 8003ec0:	20000d4c 	.word	0x20000d4c
 8003ec4:	20000d64 	.word	0x20000d64
 8003ec8:	20000d30 	.word	0x20000d30
 8003ecc:	20000d34 	.word	0x20000d34

08003ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed6:	e019      	b.n	8003f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ed8:	f000 fda4 	bl	8004a24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003edc:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <prvCheckTasksWaitingTermination+0x50>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe fd1f 	bl	800292c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <prvCheckTasksWaitingTermination+0x54>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <prvCheckTasksWaitingTermination+0x54>)
 8003ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <prvCheckTasksWaitingTermination+0x58>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <prvCheckTasksWaitingTermination+0x58>)
 8003f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f02:	f000 fdbf 	bl	8004a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f810 	bl	8003f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <prvCheckTasksWaitingTermination+0x58>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e1      	bne.n	8003ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000d4c 	.word	0x20000d4c
 8003f24:	20000d78 	.word	0x20000d78
 8003f28:	20000d60 	.word	0x20000d60

08003f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3354      	adds	r3, #84	; 0x54
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f8b9 	bl	80050b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 ff4f 	bl	8004df0 <vPortFree>
				vPortFree( pxTCB );
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 ff4c 	bl	8004df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f58:	e018      	b.n	8003f8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d103      	bne.n	8003f6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 ff43 	bl	8004df0 <vPortFree>
	}
 8003f6a:	e00f      	b.n	8003f8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d00a      	beq.n	8003f8c <prvDeleteTCB+0x60>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	60fb      	str	r3, [r7, #12]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <prvDeleteTCB+0x5e>
	}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <prvResetNextTaskUnblockTime+0x44>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <prvResetNextTaskUnblockTime+0x14>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <prvResetNextTaskUnblockTime+0x16>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <prvResetNextTaskUnblockTime+0x48>)
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fb6:	e008      	b.n	8003fca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <prvResetNextTaskUnblockTime+0x44>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <prvResetNextTaskUnblockTime+0x48>)
 8003fc8:	6013      	str	r3, [r2, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000d30 	.word	0x20000d30
 8003fdc:	20000d98 	.word	0x20000d98

08003fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <xTaskGetSchedulerState+0x34>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	e008      	b.n	8004006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <xTaskGetSchedulerState+0x38>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	607b      	str	r3, [r7, #4]
 8004000:	e001      	b.n	8004006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004006:	687b      	ldr	r3, [r7, #4]
	}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	20000d84 	.word	0x20000d84
 8004018:	20000da0 	.word	0x20000da0

0800401c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d056      	beq.n	80040e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <xTaskPriorityDisinherit+0xd0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d00a      	beq.n	8004052 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	60fb      	str	r3, [r7, #12]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60bb      	str	r3, [r7, #8]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	429a      	cmp	r2, r3
 8004084:	d02c      	beq.n	80040e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408a:	2b00      	cmp	r3, #0
 800408c:	d128      	bne.n	80040e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3304      	adds	r3, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fc4a 	bl	800292c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <xTaskPriorityDisinherit+0xd4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d903      	bls.n	80040c0 <xTaskPriorityDisinherit+0xa4>
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <xTaskPriorityDisinherit+0xd4>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <xTaskPriorityDisinherit+0xd8>)
 80040ce:	441a      	add	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7fe fbcb 	bl	8002872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040e0:	697b      	ldr	r3, [r7, #20]
	}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200008a4 	.word	0x200008a4
 80040f0:	20000d80 	.word	0x20000d80
 80040f4:	200008a8 	.word	0x200008a8

080040f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004102:	4b21      	ldr	r3, [pc, #132]	; (8004188 <prvAddCurrentTaskToDelayedList+0x90>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004108:	4b20      	ldr	r3, [pc, #128]	; (800418c <prvAddCurrentTaskToDelayedList+0x94>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3304      	adds	r3, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fc0c 	bl	800292c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800411a:	d10a      	bne.n	8004132 <prvAddCurrentTaskToDelayedList+0x3a>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <prvAddCurrentTaskToDelayedList+0x94>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4819      	ldr	r0, [pc, #100]	; (8004190 <prvAddCurrentTaskToDelayedList+0x98>)
 800412c:	f7fe fba1 	bl	8002872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004130:	e026      	b.n	8004180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <prvAddCurrentTaskToDelayedList+0x94>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	429a      	cmp	r2, r3
 8004148:	d209      	bcs.n	800415e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <prvAddCurrentTaskToDelayedList+0x94>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f7fe fbaf 	bl	80028ba <vListInsert>
}
 800415c:	e010      	b.n	8004180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <prvAddCurrentTaskToDelayedList+0x94>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe fba5 	bl	80028ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	d202      	bcs.n	8004180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <prvAddCurrentTaskToDelayedList+0xa4>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20000d7c 	.word	0x20000d7c
 800418c:	200008a4 	.word	0x200008a4
 8004190:	20000d64 	.word	0x20000d64
 8004194:	20000d34 	.word	0x20000d34
 8004198:	20000d30 	.word	0x20000d30
 800419c:	20000d98 	.word	0x20000d98

080041a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041aa:	f000 facb 	bl	8004744 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041ae:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <xTimerCreateTimerTask+0x80>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d021      	beq.n	80041fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041be:	1d3a      	adds	r2, r7, #4
 80041c0:	f107 0108 	add.w	r1, r7, #8
 80041c4:	f107 030c 	add.w	r3, r7, #12
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fb0b 	bl	80027e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	9202      	str	r2, [sp, #8]
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	2302      	movs	r3, #2
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2300      	movs	r3, #0
 80041de:	460a      	mov	r2, r1
 80041e0:	4910      	ldr	r1, [pc, #64]	; (8004224 <xTimerCreateTimerTask+0x84>)
 80041e2:	4811      	ldr	r0, [pc, #68]	; (8004228 <xTimerCreateTimerTask+0x88>)
 80041e4:	f7ff f8b2 	bl	800334c <xTaskCreateStatic>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <xTimerCreateTimerTask+0x8c>)
 80041ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <xTimerCreateTimerTask+0x8c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041f6:	2301      	movs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	613b      	str	r3, [r7, #16]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004216:	697b      	ldr	r3, [r7, #20]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000dd4 	.word	0x20000dd4
 8004224:	08005248 	.word	0x08005248
 8004228:	0800434d 	.word	0x0800434d
 800422c:	20000dd8 	.word	0x20000dd8

08004230 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	623b      	str	r3, [r7, #32]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <xTimerGenericCommand+0x98>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02a      	beq.n	80042bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b05      	cmp	r3, #5
 8004276:	dc18      	bgt.n	80042aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004278:	f7ff feb2 	bl	8003fe0 <xTaskGetSchedulerState>
 800427c:	4603      	mov	r3, r0
 800427e:	2b02      	cmp	r3, #2
 8004280:	d109      	bne.n	8004296 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004282:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <xTimerGenericCommand+0x98>)
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	f107 0110 	add.w	r1, r7, #16
 800428a:	2300      	movs	r3, #0
 800428c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428e:	f7fe fc79 	bl	8002b84 <xQueueGenericSend>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24
 8004294:	e012      	b.n	80042bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004296:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <xTimerGenericCommand+0x98>)
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	f107 0110 	add.w	r1, r7, #16
 800429e:	2300      	movs	r3, #0
 80042a0:	2200      	movs	r2, #0
 80042a2:	f7fe fc6f 	bl	8002b84 <xQueueGenericSend>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24
 80042a8:	e008      	b.n	80042bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <xTimerGenericCommand+0x98>)
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f107 0110 	add.w	r1, r7, #16
 80042b2:	2300      	movs	r3, #0
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	f7fe fd63 	bl	8002d80 <xQueueGenericSendFromISR>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3728      	adds	r7, #40	; 0x28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000dd4 	.word	0x20000dd4

080042cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d6:	4b1c      	ldr	r3, [pc, #112]	; (8004348 <prvProcessExpiredTimer+0x7c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fb21 	bl	800292c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d122      	bne.n	8004338 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	18d1      	adds	r1, r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	6978      	ldr	r0, [r7, #20]
 8004300:	f000 f8c8 	bl	8004494 <prvInsertTimerInActiveList>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	2100      	movs	r1, #0
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff ff8b 	bl	8004230 <xTimerGenericCommand>
 800431a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	60fb      	str	r3, [r7, #12]
}
 8004334:	bf00      	nop
 8004336:	e7fe      	b.n	8004336 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	6978      	ldr	r0, [r7, #20]
 800433e:	4798      	blx	r3
}
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000dcc 	.word	0x20000dcc

0800434c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004354:	f107 0308 	add.w	r3, r7, #8
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f857 	bl	800440c <prvGetNextExpireTime>
 800435e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4619      	mov	r1, r3
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f803 	bl	8004370 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800436a:	f000 f8d5 	bl	8004518 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800436e:	e7f1      	b.n	8004354 <prvTimerTask+0x8>

08004370 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800437a:	f7ff fa3b 	bl	80037f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f866 	bl	8004454 <prvSampleTimeNow>
 8004388:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d130      	bne.n	80043f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <prvProcessTimerOrBlockTask+0x3c>
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	429a      	cmp	r2, r3
 800439c:	d806      	bhi.n	80043ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800439e:	f7ff fa37 	bl	8003810 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043a2:	68f9      	ldr	r1, [r7, #12]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ff91 	bl	80042cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043aa:	e024      	b.n	80043f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <prvProcessTimerOrBlockTask+0x90>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <prvProcessTimerOrBlockTask+0x94>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	4619      	mov	r1, r3
 80043d2:	f7fe ff87 	bl	80032e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043d6:	f7ff fa1b 	bl	8003810 <xTaskResumeAll>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <prvProcessTimerOrBlockTask+0x98>)
 80043e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
}
 80043f0:	e001      	b.n	80043f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043f2:	f7ff fa0d 	bl	8003810 <xTaskResumeAll>
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000dd0 	.word	0x20000dd0
 8004404:	20000dd4 	.word	0x20000dd4
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <prvGetNextExpireTime+0x44>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <prvGetNextExpireTime+0x44>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	e001      	b.n	8004442 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004442:	68fb      	ldr	r3, [r7, #12]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000dcc 	.word	0x20000dcc

08004454 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800445c:	f7ff fa76 	bl	800394c <xTaskGetTickCount>
 8004460:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <prvSampleTimeNow+0x3c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	d205      	bcs.n	8004478 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800446c:	f000 f908 	bl	8004680 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e002      	b.n	800447e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800447e:	4a04      	ldr	r2, [pc, #16]	; (8004490 <prvSampleTimeNow+0x3c>)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004484:	68fb      	ldr	r3, [r7, #12]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000ddc 	.word	0x20000ddc

08004494 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d812      	bhi.n	80044e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e01b      	b.n	8004506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <prvInsertTimerInActiveList+0x7c>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f7fe f9ee 	bl	80028ba <vListInsert>
 80044de:	e012      	b.n	8004506 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d206      	bcs.n	80044f6 <prvInsertTimerInActiveList+0x62>
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d302      	bcc.n	80044f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044f0:	2301      	movs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e007      	b.n	8004506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <prvInsertTimerInActiveList+0x80>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f7fe f9da 	bl	80028ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004506:	697b      	ldr	r3, [r7, #20]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000dd0 	.word	0x20000dd0
 8004514:	20000dcc 	.word	0x20000dcc

08004518 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08e      	sub	sp, #56	; 0x38
 800451c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800451e:	e09d      	b.n	800465c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	da18      	bge.n	8004558 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	3304      	adds	r3, #4
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	61fb      	str	r3, [r7, #28]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454e:	6850      	ldr	r0, [r2, #4]
 8004550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004552:	6892      	ldr	r2, [r2, #8]
 8004554:	4611      	mov	r1, r2
 8004556:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	db7d      	blt.n	800465a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	3304      	adds	r3, #4
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe f9dc 	bl	800292c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004574:	463b      	mov	r3, r7
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff6c 	bl	8004454 <prvSampleTimeNow>
 800457c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b09      	cmp	r3, #9
 8004582:	d86b      	bhi.n	800465c <prvProcessReceivedCommands+0x144>
 8004584:	a201      	add	r2, pc, #4	; (adr r2, 800458c <prvProcessReceivedCommands+0x74>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045b5 	.word	0x080045b5
 8004598:	0800465d 	.word	0x0800465d
 800459c:	08004611 	.word	0x08004611
 80045a0:	08004649 	.word	0x08004649
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045b5 	.word	0x080045b5
 80045ac:	0800465d 	.word	0x0800465d
 80045b0:	08004611 	.word	0x08004611
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	18d1      	adds	r1, r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c2:	f7ff ff67 	bl	8004494 <prvInsertTimerInActiveList>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d047      	beq.n	800465c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d13f      	bne.n	800465c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	441a      	add	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	2100      	movs	r1, #0
 80045ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ee:	f7ff fe1f 	bl	8004230 <xTimerGenericCommand>
 80045f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d130      	bne.n	800465c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	61bb      	str	r3, [r7, #24]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	617b      	str	r3, [r7, #20]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	18d1      	adds	r1, r2, r3
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004642:	f7ff ff27 	bl	8004494 <prvInsertTimerInActiveList>
					break;
 8004646:	e009      	b.n	800465c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004654:	f000 fbcc 	bl	8004df0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004658:	e000      	b.n	800465c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800465a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <prvProcessReceivedCommands+0x164>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1d39      	adds	r1, r7, #4
 8004662:	2200      	movs	r2, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fc23 	bl	8002eb0 <xQueueReceive>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f af57 	bne.w	8004520 <prvProcessReceivedCommands+0x8>
	}
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	3730      	adds	r7, #48	; 0x30
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000dd4 	.word	0x20000dd4

08004680 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004686:	e045      	b.n	8004714 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004688:	4b2c      	ldr	r3, [pc, #176]	; (800473c <prvSwitchTimerLists+0xbc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004692:	4b2a      	ldr	r3, [pc, #168]	; (800473c <prvSwitchTimerLists+0xbc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3304      	adds	r3, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe f943 	bl	800292c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d12e      	bne.n	8004714 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4413      	add	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d90e      	bls.n	80046e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046d4:	4b19      	ldr	r3, [pc, #100]	; (800473c <prvSwitchTimerLists+0xbc>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3304      	adds	r3, #4
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f7fe f8eb 	bl	80028ba <vListInsert>
 80046e4:	e016      	b.n	8004714 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	2100      	movs	r1, #0
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fd9d 	bl	8004230 <xTimerGenericCommand>
 80046f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <prvSwitchTimerLists+0x94>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	603b      	str	r3, [r7, #0]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <prvSwitchTimerLists+0xbc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1b4      	bne.n	8004688 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <prvSwitchTimerLists+0xbc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <prvSwitchTimerLists+0xc0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a04      	ldr	r2, [pc, #16]	; (800473c <prvSwitchTimerLists+0xbc>)
 800472a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <prvSwitchTimerLists+0xc0>)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	6013      	str	r3, [r2, #0]
}
 8004732:	bf00      	nop
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000dcc 	.word	0x20000dcc
 8004740:	20000dd0 	.word	0x20000dd0

08004744 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800474a:	f000 f96b 	bl	8004a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <prvCheckForValidListAndQueue+0x60>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d120      	bne.n	8004798 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004756:	4814      	ldr	r0, [pc, #80]	; (80047a8 <prvCheckForValidListAndQueue+0x64>)
 8004758:	f7fe f85e 	bl	8002818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800475c:	4813      	ldr	r0, [pc, #76]	; (80047ac <prvCheckForValidListAndQueue+0x68>)
 800475e:	f7fe f85b 	bl	8002818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004762:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <prvCheckForValidListAndQueue+0x6c>)
 8004764:	4a10      	ldr	r2, [pc, #64]	; (80047a8 <prvCheckForValidListAndQueue+0x64>)
 8004766:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <prvCheckForValidListAndQueue+0x70>)
 800476a:	4a10      	ldr	r2, [pc, #64]	; (80047ac <prvCheckForValidListAndQueue+0x68>)
 800476c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800476e:	2300      	movs	r3, #0
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <prvCheckForValidListAndQueue+0x74>)
 8004774:	4a11      	ldr	r2, [pc, #68]	; (80047bc <prvCheckForValidListAndQueue+0x78>)
 8004776:	2110      	movs	r1, #16
 8004778:	200a      	movs	r0, #10
 800477a:	f7fe f969 	bl	8002a50 <xQueueGenericCreateStatic>
 800477e:	4603      	mov	r3, r0
 8004780:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <prvCheckForValidListAndQueue+0x60>)
 8004782:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <prvCheckForValidListAndQueue+0x60>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <prvCheckForValidListAndQueue+0x60>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	490b      	ldr	r1, [pc, #44]	; (80047c0 <prvCheckForValidListAndQueue+0x7c>)
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fd7c 	bl	8003290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004798:	f000 f974 	bl	8004a84 <vPortExitCritical>
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000dd4 	.word	0x20000dd4
 80047a8:	20000da4 	.word	0x20000da4
 80047ac:	20000db8 	.word	0x20000db8
 80047b0:	20000dcc 	.word	0x20000dcc
 80047b4:	20000dd0 	.word	0x20000dd0
 80047b8:	20000e80 	.word	0x20000e80
 80047bc:	20000de0 	.word	0x20000de0
 80047c0:	08005250 	.word	0x08005250

080047c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b04      	subs	r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0201 	bic.w	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3b04      	subs	r3, #4
 80047f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047f4:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <pxPortInitialiseStack+0x64>)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b14      	subs	r3, #20
 80047fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b04      	subs	r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f06f 0202 	mvn.w	r2, #2
 8004812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b20      	subs	r3, #32
 8004818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800481a:	68fb      	ldr	r3, [r7, #12]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	0800482d 	.word	0x0800482d

0800482c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <prvTaskExitError+0x54>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483e:	d00a      	beq.n	8004856 <prvTaskExitError+0x2a>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	60fb      	str	r3, [r7, #12]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <prvTaskExitError+0x28>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	60bb      	str	r3, [r7, #8]
}
 8004868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800486a:	bf00      	nop
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0fc      	beq.n	800486c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	2000000c 	.word	0x2000000c
	...

08004890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <pxCurrentTCBConst2>)
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6808      	ldr	r0, [r1, #0]
 8004896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	f380 8809 	msr	PSP, r0
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f04f 0000 	mov.w	r0, #0
 80048a6:	f380 8811 	msr	BASEPRI, r0
 80048aa:	4770      	bx	lr
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst2>:
 80048b0:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048b8:	4808      	ldr	r0, [pc, #32]	; (80048dc <prvPortStartFirstTask+0x24>)
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	6800      	ldr	r0, [r0, #0]
 80048be:	f380 8808 	msr	MSP, r0
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8814 	msr	CONTROL, r0
 80048ca:	b662      	cpsie	i
 80048cc:	b661      	cpsie	f
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	df00      	svc	0
 80048d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048da:	bf00      	nop
 80048dc:	e000ed08 	.word	0xe000ed08

080048e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048e6:	4b46      	ldr	r3, [pc, #280]	; (8004a00 <xPortStartScheduler+0x120>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a46      	ldr	r2, [pc, #280]	; (8004a04 <xPortStartScheduler+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10a      	bne.n	8004906 <xPortStartScheduler+0x26>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004906:	4b3e      	ldr	r3, [pc, #248]	; (8004a00 <xPortStartScheduler+0x120>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <xPortStartScheduler+0x128>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10a      	bne.n	8004926 <xPortStartScheduler+0x46>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <xPortStartScheduler+0x12c>)
 8004928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	22ff      	movs	r2, #255	; 0xff
 8004936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <xPortStartScheduler+0x130>)
 800494c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800494e:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <xPortStartScheduler+0x134>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004954:	e009      	b.n	800496a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <xPortStartScheduler+0x134>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <xPortStartScheduler+0x134>)
 800495e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b80      	cmp	r3, #128	; 0x80
 8004974:	d0ef      	beq.n	8004956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <xPortStartScheduler+0x134>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1c3 0307 	rsb	r3, r3, #7
 800497e:	2b04      	cmp	r3, #4
 8004980:	d00a      	beq.n	8004998 <xPortStartScheduler+0xb8>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60bb      	str	r3, [r7, #8]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004998:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <xPortStartScheduler+0x134>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <xPortStartScheduler+0x134>)
 80049a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <xPortStartScheduler+0x134>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049aa:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <xPortStartScheduler+0x134>)
 80049ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049b6:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <xPortStartScheduler+0x138>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <xPortStartScheduler+0x138>)
 80049bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <xPortStartScheduler+0x138>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <xPortStartScheduler+0x138>)
 80049c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049ce:	f000 f8dd 	bl	8004b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <xPortStartScheduler+0x13c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049d8:	f000 f8fc 	bl	8004bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <xPortStartScheduler+0x140>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0f      	ldr	r2, [pc, #60]	; (8004a20 <xPortStartScheduler+0x140>)
 80049e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049e8:	f7ff ff66 	bl	80048b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049ec:	f7ff f87c 	bl	8003ae8 <vTaskSwitchContext>
	prvTaskExitError();
 80049f0:	f7ff ff1c 	bl	800482c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	e000ed00 	.word	0xe000ed00
 8004a04:	410fc271 	.word	0x410fc271
 8004a08:	410fc270 	.word	0x410fc270
 8004a0c:	e000e400 	.word	0xe000e400
 8004a10:	20000ed0 	.word	0x20000ed0
 8004a14:	20000ed4 	.word	0x20000ed4
 8004a18:	e000ed20 	.word	0xe000ed20
 8004a1c:	2000000c 	.word	0x2000000c
 8004a20:	e000ef34 	.word	0xe000ef34

08004a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	607b      	str	r3, [r7, #4]
}
 8004a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <vPortEnterCritical+0x58>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <vPortEnterCritical+0x58>)
 8004a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <vPortEnterCritical+0x58>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10f      	bne.n	8004a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <vPortEnterCritical+0x5c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	603b      	str	r3, [r7, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <vPortEnterCritical+0x4a>
	}
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	2000000c 	.word	0x2000000c
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <vPortExitCritical+0x50>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <vPortExitCritical+0x24>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	607b      	str	r3, [r7, #4]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <vPortExitCritical+0x50>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <vPortExitCritical+0x50>)
 8004ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <vPortExitCritical+0x50>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <vPortExitCritical+0x42>
 8004aba:	2300      	movs	r3, #0
 8004abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f383 8811 	msr	BASEPRI, r3
}
 8004ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000000c 	.word	0x2000000c
	...

08004ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ae0:	f3ef 8009 	mrs	r0, PSP
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <pxCurrentTCBConst>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f01e 0f10 	tst.w	lr, #16
 8004af0:	bf08      	it	eq
 8004af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b04:	f380 8811 	msr	BASEPRI, r0
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f7fe ffea 	bl	8003ae8 <vTaskSwitchContext>
 8004b14:	f04f 0000 	mov.w	r0, #0
 8004b18:	f380 8811 	msr	BASEPRI, r0
 8004b1c:	bc09      	pop	{r0, r3}
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	6808      	ldr	r0, [r1, #0]
 8004b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b26:	f01e 0f10 	tst.w	lr, #16
 8004b2a:	bf08      	it	eq
 8004b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b30:	f380 8809 	msr	PSP, r0
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	f3af 8000 	nop.w

08004b40 <pxCurrentTCBConst>:
 8004b40:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b62:	f7fe ff03 	bl	800396c <xTaskIncrementTick>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <SysTick_Handler+0x40>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
}
 8004b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <vPortSetupTimerInterrupt+0x38>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <vPortSetupTimerInterrupt+0x3c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <vPortSetupTimerInterrupt+0x40>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <vPortSetupTimerInterrupt+0x44>)
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e010 	.word	0xe000e010
 8004bc4:	e000e018 	.word	0xe000e018
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	10624dd3 	.word	0x10624dd3
 8004bd0:	e000e014 	.word	0xe000e014

08004bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004be4 <vPortEnableVFP+0x10>
 8004bd8:	6801      	ldr	r1, [r0, #0]
 8004bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bde:	6001      	str	r1, [r0, #0]
 8004be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004be2:	bf00      	nop
 8004be4:	e000ed88 	.word	0xe000ed88

08004be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bee:	f3ef 8305 	mrs	r3, IPSR
 8004bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	d914      	bls.n	8004c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bfa:	4a17      	ldr	r2, [pc, #92]	; (8004c58 <vPortValidateInterruptPriority+0x70>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c04:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <vPortValidateInterruptPriority+0x74>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	7afa      	ldrb	r2, [r7, #11]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d20a      	bcs.n	8004c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <vPortValidateInterruptPriority+0x78>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <vPortValidateInterruptPriority+0x7c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d90a      	bls.n	8004c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	603b      	str	r3, [r7, #0]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <vPortValidateInterruptPriority+0x60>
	}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	e000e3f0 	.word	0xe000e3f0
 8004c5c:	20000ed0 	.word	0x20000ed0
 8004c60:	e000ed0c 	.word	0xe000ed0c
 8004c64:	20000ed4 	.word	0x20000ed4

08004c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c74:	f7fe fdbe 	bl	80037f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c78:	4b58      	ldr	r3, [pc, #352]	; (8004ddc <pvPortMalloc+0x174>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c80:	f000 f910 	bl	8004ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c84:	4b56      	ldr	r3, [pc, #344]	; (8004de0 <pvPortMalloc+0x178>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 808e 	bne.w	8004dae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01d      	beq.n	8004cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c98:	2208      	movs	r2, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d014      	beq.n	8004cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f023 0307 	bic.w	r3, r3, #7
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	617b      	str	r3, [r7, #20]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d069      	beq.n	8004dae <pvPortMalloc+0x146>
 8004cda:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <pvPortMalloc+0x17c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d864      	bhi.n	8004dae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ce4:	4b40      	ldr	r3, [pc, #256]	; (8004de8 <pvPortMalloc+0x180>)
 8004ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ce8:	4b3f      	ldr	r3, [pc, #252]	; (8004de8 <pvPortMalloc+0x180>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cee:	e004      	b.n	8004cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d903      	bls.n	8004d0c <pvPortMalloc+0xa4>
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f1      	bne.n	8004cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d0c:	4b33      	ldr	r3, [pc, #204]	; (8004ddc <pvPortMalloc+0x174>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d04b      	beq.n	8004dae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	4413      	add	r3, r2
 8004d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	2308      	movs	r3, #8
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d91f      	bls.n	8004d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <pvPortMalloc+0xf8>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	613b      	str	r3, [r7, #16]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d72:	69b8      	ldr	r0, [r7, #24]
 8004d74:	f000 f8f8 	bl	8004f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <pvPortMalloc+0x17c>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <pvPortMalloc+0x17c>)
 8004d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d86:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <pvPortMalloc+0x17c>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b18      	ldr	r3, [pc, #96]	; (8004dec <pvPortMalloc+0x184>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d203      	bcs.n	8004d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <pvPortMalloc+0x17c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a15      	ldr	r2, [pc, #84]	; (8004dec <pvPortMalloc+0x184>)
 8004d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <pvPortMalloc+0x178>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004dae:	f7fe fd2f 	bl	8003810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <pvPortMalloc+0x16a>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60fb      	str	r3, [r7, #12]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <pvPortMalloc+0x168>
	return pvReturn;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20001ae0 	.word	0x20001ae0
 8004de0:	20001aec 	.word	0x20001aec
 8004de4:	20001ae4 	.word	0x20001ae4
 8004de8:	20001ad8 	.word	0x20001ad8
 8004dec:	20001ae8 	.word	0x20001ae8

08004df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d048      	beq.n	8004e94 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e02:	2308      	movs	r3, #8
 8004e04:	425b      	negs	r3, r3
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4413      	add	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <vPortFree+0xac>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <vPortFree+0x44>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	60fb      	str	r3, [r7, #12]
}
 8004e30:	bf00      	nop
 8004e32:	e7fe      	b.n	8004e32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <vPortFree+0x62>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	60bb      	str	r3, [r7, #8]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <vPortFree+0xac>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d019      	beq.n	8004e94 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d115      	bne.n	8004e94 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <vPortFree+0xac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	43db      	mvns	r3, r3
 8004e72:	401a      	ands	r2, r3
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e78:	f7fe fcbc 	bl	80037f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <vPortFree+0xb0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <vPortFree+0xb0>)
 8004e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e8a:	6938      	ldr	r0, [r7, #16]
 8004e8c:	f000 f86c 	bl	8004f68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e90:	f7fe fcbe 	bl	8003810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e94:	bf00      	nop
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20001aec 	.word	0x20001aec
 8004ea0:	20001ae4 	.word	0x20001ae4

08004ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004eb0:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <prvHeapInit+0xac>)
 8004eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3307      	adds	r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0307 	bic.w	r3, r3, #7
 8004eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <prvHeapInit+0xac>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <prvHeapInit+0xb0>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <prvHeapInit+0xb0>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4413      	add	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0307 	bic.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <prvHeapInit+0xb4>)
 8004f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <prvHeapInit+0xb4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <prvHeapInit+0xb4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <prvHeapInit+0xb4>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <prvHeapInit+0xb8>)
 8004f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <prvHeapInit+0xbc>)
 8004f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <prvHeapInit+0xc0>)
 8004f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	20000ed8 	.word	0x20000ed8
 8004f54:	20001ad8 	.word	0x20001ad8
 8004f58:	20001ae0 	.word	0x20001ae0
 8004f5c:	20001ae8 	.word	0x20001ae8
 8004f60:	20001ae4 	.word	0x20001ae4
 8004f64:	20001aec 	.word	0x20001aec

08004f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <prvInsertBlockIntoFreeList+0xac>)
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e002      	b.n	8004f7c <prvInsertBlockIntoFreeList+0x14>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d8f7      	bhi.n	8004f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4413      	add	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d108      	bne.n	8004faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d118      	bne.n	8004ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <prvInsertBlockIntoFreeList+0xb0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d00d      	beq.n	8004fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	441a      	add	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e008      	b.n	8004ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvInsertBlockIntoFreeList+0xb0>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e003      	b.n	8004ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d002      	beq.n	8005006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20001ad8 	.word	0x20001ad8
 8005018:	20001ae0 	.word	0x20001ae0

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4d0d      	ldr	r5, [pc, #52]	; (8005054 <__libc_init_array+0x38>)
 8005020:	4c0d      	ldr	r4, [pc, #52]	; (8005058 <__libc_init_array+0x3c>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	2600      	movs	r6, #0
 8005028:	42a6      	cmp	r6, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	4d0b      	ldr	r5, [pc, #44]	; (800505c <__libc_init_array+0x40>)
 800502e:	4c0c      	ldr	r4, [pc, #48]	; (8005060 <__libc_init_array+0x44>)
 8005030:	f000 f8f2 	bl	8005218 <_init>
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	2600      	movs	r6, #0
 800503a:	42a6      	cmp	r6, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f855 3b04 	ldr.w	r3, [r5], #4
 8005044:	4798      	blx	r3
 8005046:	3601      	adds	r6, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f855 3b04 	ldr.w	r3, [r5], #4
 800504e:	4798      	blx	r3
 8005050:	3601      	adds	r6, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	08005338 	.word	0x08005338
 8005058:	08005338 	.word	0x08005338
 800505c:	08005338 	.word	0x08005338
 8005060:	0800533c 	.word	0x0800533c

08005064 <__retarget_lock_acquire_recursive>:
 8005064:	4770      	bx	lr

08005066 <__retarget_lock_release_recursive>:
 8005066:	4770      	bx	lr

08005068 <memcpy>:
 8005068:	440a      	add	r2, r1
 800506a:	4291      	cmp	r1, r2
 800506c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005070:	d100      	bne.n	8005074 <memcpy+0xc>
 8005072:	4770      	bx	lr
 8005074:	b510      	push	{r4, lr}
 8005076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800507e:	4291      	cmp	r1, r2
 8005080:	d1f9      	bne.n	8005076 <memcpy+0xe>
 8005082:	bd10      	pop	{r4, pc}

08005084 <memset>:
 8005084:	4402      	add	r2, r0
 8005086:	4603      	mov	r3, r0
 8005088:	4293      	cmp	r3, r2
 800508a:	d100      	bne.n	800508e <memset+0xa>
 800508c:	4770      	bx	lr
 800508e:	f803 1b01 	strb.w	r1, [r3], #1
 8005092:	e7f9      	b.n	8005088 <memset+0x4>

08005094 <cleanup_glue>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	460c      	mov	r4, r1
 8005098:	6809      	ldr	r1, [r1, #0]
 800509a:	4605      	mov	r5, r0
 800509c:	b109      	cbz	r1, 80050a2 <cleanup_glue+0xe>
 800509e:	f7ff fff9 	bl	8005094 <cleanup_glue>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4628      	mov	r0, r5
 80050a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050aa:	f000 b869 	b.w	8005180 <_free_r>
	...

080050b0 <_reclaim_reent>:
 80050b0:	4b2c      	ldr	r3, [pc, #176]	; (8005164 <_reclaim_reent+0xb4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4283      	cmp	r3, r0
 80050b6:	b570      	push	{r4, r5, r6, lr}
 80050b8:	4604      	mov	r4, r0
 80050ba:	d051      	beq.n	8005160 <_reclaim_reent+0xb0>
 80050bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050be:	b143      	cbz	r3, 80050d2 <_reclaim_reent+0x22>
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d14a      	bne.n	800515c <_reclaim_reent+0xac>
 80050c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	b111      	cbz	r1, 80050d2 <_reclaim_reent+0x22>
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f857 	bl	8005180 <_free_r>
 80050d2:	6961      	ldr	r1, [r4, #20]
 80050d4:	b111      	cbz	r1, 80050dc <_reclaim_reent+0x2c>
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 f852 	bl	8005180 <_free_r>
 80050dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050de:	b111      	cbz	r1, 80050e6 <_reclaim_reent+0x36>
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 f84d 	bl	8005180 <_free_r>
 80050e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80050e8:	b111      	cbz	r1, 80050f0 <_reclaim_reent+0x40>
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 f848 	bl	8005180 <_free_r>
 80050f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80050f2:	b111      	cbz	r1, 80050fa <_reclaim_reent+0x4a>
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 f843 	bl	8005180 <_free_r>
 80050fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80050fc:	b111      	cbz	r1, 8005104 <_reclaim_reent+0x54>
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f83e 	bl	8005180 <_free_r>
 8005104:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005106:	b111      	cbz	r1, 800510e <_reclaim_reent+0x5e>
 8005108:	4620      	mov	r0, r4
 800510a:	f000 f839 	bl	8005180 <_free_r>
 800510e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005110:	b111      	cbz	r1, 8005118 <_reclaim_reent+0x68>
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f834 	bl	8005180 <_free_r>
 8005118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800511a:	b111      	cbz	r1, 8005122 <_reclaim_reent+0x72>
 800511c:	4620      	mov	r0, r4
 800511e:	f000 f82f 	bl	8005180 <_free_r>
 8005122:	69a3      	ldr	r3, [r4, #24]
 8005124:	b1e3      	cbz	r3, 8005160 <_reclaim_reent+0xb0>
 8005126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005128:	4620      	mov	r0, r4
 800512a:	4798      	blx	r3
 800512c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800512e:	b1b9      	cbz	r1, 8005160 <_reclaim_reent+0xb0>
 8005130:	4620      	mov	r0, r4
 8005132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005136:	f7ff bfad 	b.w	8005094 <cleanup_glue>
 800513a:	5949      	ldr	r1, [r1, r5]
 800513c:	b941      	cbnz	r1, 8005150 <_reclaim_reent+0xa0>
 800513e:	3504      	adds	r5, #4
 8005140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005142:	2d80      	cmp	r5, #128	; 0x80
 8005144:	68d9      	ldr	r1, [r3, #12]
 8005146:	d1f8      	bne.n	800513a <_reclaim_reent+0x8a>
 8005148:	4620      	mov	r0, r4
 800514a:	f000 f819 	bl	8005180 <_free_r>
 800514e:	e7ba      	b.n	80050c6 <_reclaim_reent+0x16>
 8005150:	680e      	ldr	r6, [r1, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	f000 f814 	bl	8005180 <_free_r>
 8005158:	4631      	mov	r1, r6
 800515a:	e7ef      	b.n	800513c <_reclaim_reent+0x8c>
 800515c:	2500      	movs	r5, #0
 800515e:	e7ef      	b.n	8005140 <_reclaim_reent+0x90>
 8005160:	bd70      	pop	{r4, r5, r6, pc}
 8005162:	bf00      	nop
 8005164:	20000010 	.word	0x20000010

08005168 <__malloc_lock>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__malloc_lock+0x8>)
 800516a:	f7ff bf7b 	b.w	8005064 <__retarget_lock_acquire_recursive>
 800516e:	bf00      	nop
 8005170:	20001af0 	.word	0x20001af0

08005174 <__malloc_unlock>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__malloc_unlock+0x8>)
 8005176:	f7ff bf76 	b.w	8005066 <__retarget_lock_release_recursive>
 800517a:	bf00      	nop
 800517c:	20001af0 	.word	0x20001af0

08005180 <_free_r>:
 8005180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005182:	2900      	cmp	r1, #0
 8005184:	d044      	beq.n	8005210 <_free_r+0x90>
 8005186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800518a:	9001      	str	r0, [sp, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f1a1 0404 	sub.w	r4, r1, #4
 8005192:	bfb8      	it	lt
 8005194:	18e4      	addlt	r4, r4, r3
 8005196:	f7ff ffe7 	bl	8005168 <__malloc_lock>
 800519a:	4a1e      	ldr	r2, [pc, #120]	; (8005214 <_free_r+0x94>)
 800519c:	9801      	ldr	r0, [sp, #4]
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	b933      	cbnz	r3, 80051b0 <_free_r+0x30>
 80051a2:	6063      	str	r3, [r4, #4]
 80051a4:	6014      	str	r4, [r2, #0]
 80051a6:	b003      	add	sp, #12
 80051a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051ac:	f7ff bfe2 	b.w	8005174 <__malloc_unlock>
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	d908      	bls.n	80051c6 <_free_r+0x46>
 80051b4:	6825      	ldr	r5, [r4, #0]
 80051b6:	1961      	adds	r1, r4, r5
 80051b8:	428b      	cmp	r3, r1
 80051ba:	bf01      	itttt	eq
 80051bc:	6819      	ldreq	r1, [r3, #0]
 80051be:	685b      	ldreq	r3, [r3, #4]
 80051c0:	1949      	addeq	r1, r1, r5
 80051c2:	6021      	streq	r1, [r4, #0]
 80051c4:	e7ed      	b.n	80051a2 <_free_r+0x22>
 80051c6:	461a      	mov	r2, r3
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b10b      	cbz	r3, 80051d0 <_free_r+0x50>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d9fa      	bls.n	80051c6 <_free_r+0x46>
 80051d0:	6811      	ldr	r1, [r2, #0]
 80051d2:	1855      	adds	r5, r2, r1
 80051d4:	42a5      	cmp	r5, r4
 80051d6:	d10b      	bne.n	80051f0 <_free_r+0x70>
 80051d8:	6824      	ldr	r4, [r4, #0]
 80051da:	4421      	add	r1, r4
 80051dc:	1854      	adds	r4, r2, r1
 80051de:	42a3      	cmp	r3, r4
 80051e0:	6011      	str	r1, [r2, #0]
 80051e2:	d1e0      	bne.n	80051a6 <_free_r+0x26>
 80051e4:	681c      	ldr	r4, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	4421      	add	r1, r4
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	e7da      	b.n	80051a6 <_free_r+0x26>
 80051f0:	d902      	bls.n	80051f8 <_free_r+0x78>
 80051f2:	230c      	movs	r3, #12
 80051f4:	6003      	str	r3, [r0, #0]
 80051f6:	e7d6      	b.n	80051a6 <_free_r+0x26>
 80051f8:	6825      	ldr	r5, [r4, #0]
 80051fa:	1961      	adds	r1, r4, r5
 80051fc:	428b      	cmp	r3, r1
 80051fe:	bf04      	itt	eq
 8005200:	6819      	ldreq	r1, [r3, #0]
 8005202:	685b      	ldreq	r3, [r3, #4]
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	bf04      	itt	eq
 8005208:	1949      	addeq	r1, r1, r5
 800520a:	6021      	streq	r1, [r4, #0]
 800520c:	6054      	str	r4, [r2, #4]
 800520e:	e7ca      	b.n	80051a6 <_free_r+0x26>
 8005210:	b003      	add	sp, #12
 8005212:	bd30      	pop	{r4, r5, pc}
 8005214:	20001af4 	.word	0x20001af4

08005218 <_init>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr

08005224 <_fini>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr
